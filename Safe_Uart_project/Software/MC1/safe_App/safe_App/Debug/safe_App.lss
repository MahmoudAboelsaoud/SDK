
safe_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  00000572  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c62  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a1  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000630  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000278  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000627  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a4c  00000000  00000000  00002deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_13>
  38:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_14>
  3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3b 02 	call	0x476	; 0x476 <main>
  8a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3) 

u8 KeyPad_4x3_adjustKeyNumber(u8 button_number)
{
	switch(button_number)
  92:	8a 30       	cpi	r24, 0x0A	; 10
  94:	31 f0       	breq	.+12     	; 0xa2 <KeyPad_4x3_adjustKeyNumber+0x10>
  96:	50 f0       	brcs	.+20     	; 0xac <KeyPad_4x3_adjustKeyNumber+0x1a>
  98:	8b 30       	cpi	r24, 0x0B	; 11
  9a:	39 f0       	breq	.+14     	; 0xaa <KeyPad_4x3_adjustKeyNumber+0x18>
  9c:	8c 30       	cpi	r24, 0x0C	; 12
  9e:	31 f4       	brne	.+12     	; 0xac <KeyPad_4x3_adjustKeyNumber+0x1a>
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <KeyPad_4x3_adjustKeyNumber+0x14>
	{
		case 10: return '*'; // ASCII Code of =
  a2:	8a e2       	ldi	r24, 0x2A	; 42
  a4:	08 95       	ret
				 break;
		case 11: return 0;
				 break;		
		case 12: return '#'; // ASCII Code of +
  a6:	83 e2       	ldi	r24, 0x23	; 35
  a8:	08 95       	ret
{
	switch(button_number)
	{
		case 10: return '*'; // ASCII Code of =
				 break;
		case 11: return 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
				 break;		
		case 12: return '#'; // ASCII Code of +
				 break;
		default: return button_number;								 						
	}
} 
  ac:	08 95       	ret

000000ae <KeyPad_getPressedKey>:

u8 KeyPad_getPressedKey(void){
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
  ae:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
  b0:	60 e1       	ldi	r22, 0x10	; 16
  b2:	70 e0       	ldi	r23, 0x00	; 0
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
  b4:	e1 e0       	ldi	r30, 0x01	; 1
  b6:	f0 e0       	ldi	r31, 0x00	; 0

u8 KeyPad_getPressedKey(void){
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
  b8:	a0 e0       	ldi	r26, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
  ba:	9b 01       	movw	r18, r22
  bc:	08 2e       	mov	r0, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <KeyPad_getPressedKey+0x16>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <KeyPad_getPressedKey+0x12>
  c8:	24 bb       	out	0x14, r18	; 20
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
  ca:	20 95       	com	r18
  cc:	25 bb       	out	0x15, r18	; 21
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
  ce:	98 9b       	sbis	0x13, 0	; 19
  d0:	0d c0       	rjmp	.+26     	; 0xec <KeyPad_getPressedKey+0x3e>
  d2:	9f 01       	movw	r18, r30
  d4:	92 2f       	mov	r25, r18
  d6:	43 b3       	in	r20, 0x13	; 19
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	02 2e       	mov	r0, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <KeyPad_getPressedKey+0x34>
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <KeyPad_getPressedKey+0x30>
  e6:	40 fd       	sbrc	r20, 0
  e8:	0a c0       	rjmp	.+20     	; 0xfe <KeyPad_getPressedKey+0x50>
  ea:	01 c0       	rjmp	.+2      	; 0xee <KeyPad_getPressedKey+0x40>
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
  ec:	90 e0       	ldi	r25, 0x00	; 0
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	29 2f       	mov	r18, r25
  f2:	22 0f       	add	r18, r18
  f4:	92 0f       	add	r25, r18
  f6:	89 0f       	add	r24, r25
  f8:	0e 94 49 00 	call	0x92	; 0x92 <KeyPad_4x3_adjustKeyNumber>
  fc:	08 95       	ret
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
 102:	24 30       	cpi	r18, 0x04	; 4
 104:	31 05       	cpc	r19, r1
 106:	31 f7       	brne	.-52     	; 0xd4 <KeyPad_getPressedKey+0x26>

u8 KeyPad_getPressedKey(void){
	u8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	b0 f2       	brcs	.-84     	; 0xba <KeyPad_getPressedKey+0xc>
 10e:	8a 2f       	mov	r24, r26
 110:	d4 cf       	rjmp	.-88     	; 0xba <KeyPad_getPressedKey+0xc>

00000112 <MGPIO_SetPortDirection>:


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
	if(Copy_ProtDir == OUTPUT)
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	09 f0       	breq	.+2      	; 0x118 <MGPIO_SetPortDirection+0x6>
 116:	41 c0       	rjmp	.+130    	; 0x19a <MGPIO_SetPortDirection+0x88>
	{
		if     (Copy_Port == PORTA)  SET_BIT(DIR_DDRA,Copy_Pin);
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	71 f4       	brne	.+28     	; 0x138 <MGPIO_SetPortDirection+0x26>
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ac 01       	movw	r20, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <MGPIO_SetPortDirection+0x18>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <MGPIO_SetPortDirection+0x14>
 12e:	ba 01       	movw	r22, r20
 130:	62 2b       	or	r22, r18
 132:	6a bb       	out	0x1a, r22	; 26
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
	if(Copy_ProtDir == OUTPUT)
	{
		if     (Copy_Port == PORTA)  SET_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  SET_BIT(DIR_DDRB,Copy_Pin);
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	71 f4       	brne	.+28     	; 0x158 <MGPIO_SetPortDirection+0x46>
 13c:	27 b3       	in	r18, 0x17	; 23
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ac 01       	movw	r20, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <MGPIO_SetPortDirection+0x38>
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <MGPIO_SetPortDirection+0x34>
 14e:	ba 01       	movw	r22, r20
 150:	62 2b       	or	r22, r18
 152:	67 bb       	out	0x17, r22	; 23
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
	if(Copy_ProtDir == OUTPUT)
	{
		if     (Copy_Port == PORTA)  SET_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  SET_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  SET_BIT(DIR_DDRC,Copy_Pin);
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	71 f4       	brne	.+28     	; 0x178 <MGPIO_SetPortDirection+0x66>
 15c:	24 b3       	in	r18, 0x14	; 20
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	ac 01       	movw	r20, r24
 164:	02 c0       	rjmp	.+4      	; 0x16a <MGPIO_SetPortDirection+0x58>
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <MGPIO_SetPortDirection+0x54>
 16e:	ba 01       	movw	r22, r20
 170:	62 2b       	or	r22, r18
 172:	64 bb       	out	0x14, r22	; 20
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
	if(Copy_ProtDir == OUTPUT)
	{
		if     (Copy_Port == PORTA)  SET_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  SET_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  SET_BIT(DIR_DDRC,Copy_Pin);
		else if(Copy_Port == PORTD)  SET_BIT(DIR_DDRD,Copy_Pin);
 178:	85 30       	cpi	r24, 0x05	; 5
 17a:	09 f0       	breq	.+2      	; 0x17e <MGPIO_SetPortDirection+0x6c>
 17c:	52 c0       	rjmp	.+164    	; 0x222 <MGPIO_SetPortDirection+0x110>
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <MGPIO_SetPortDirection+0x7a>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <MGPIO_SetPortDirection+0x76>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
		else if(Copy_Port == PORTD)  SET_BIT(DIR_DDRD,Copy_Pin);
		else ret_val = E_FALSE;
	}
	else
	{
		if     (Copy_Port == PORTA)  CLR_BIT(DIR_DDRA,Copy_Pin);
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	79 f4       	brne	.+30     	; 0x1bc <MGPIO_SetPortDirection+0xaa>
 19e:	2a b3       	in	r18, 0x1a	; 26
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ac 01       	movw	r20, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <MGPIO_SetPortDirection+0x9a>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <MGPIO_SetPortDirection+0x96>
 1b0:	ba 01       	movw	r22, r20
 1b2:	60 95       	com	r22
 1b4:	62 23       	and	r22, r18
 1b6:	6a bb       	out	0x1a, r22	; 26
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
		else ret_val = E_FALSE;
	}
	else
	{
		if     (Copy_Port == PORTA)  CLR_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  CLR_BIT(DIR_DDRB,Copy_Pin);
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	79 f4       	brne	.+30     	; 0x1de <MGPIO_SetPortDirection+0xcc>
 1c0:	27 b3       	in	r18, 0x17	; 23
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <MGPIO_SetPortDirection+0xbc>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <MGPIO_SetPortDirection+0xb8>
 1d2:	ba 01       	movw	r22, r20
 1d4:	60 95       	com	r22
 1d6:	62 23       	and	r22, r18
 1d8:	67 bb       	out	0x17, r22	; 23
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
	}
	else
	{
		if     (Copy_Port == PORTA)  CLR_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  CLR_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  CLR_BIT(DIR_DDRC,Copy_Pin);
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	79 f4       	brne	.+30     	; 0x200 <MGPIO_SetPortDirection+0xee>
 1e2:	24 b3       	in	r18, 0x14	; 20
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <MGPIO_SetPortDirection+0xde>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <MGPIO_SetPortDirection+0xda>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	64 bb       	out	0x14, r22	; 20
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	08 95       	ret
	else
	{
		if     (Copy_Port == PORTA)  CLR_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  CLR_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  CLR_BIT(DIR_DDRC,Copy_Pin);
		else if(Copy_Port == PORTD)  CLR_BIT(DIR_DDRD,Copy_Pin);
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	89 f4       	brne	.+34     	; 0x226 <MGPIO_SetPortDirection+0x114>
 204:	21 b3       	in	r18, 0x11	; 17
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	ac 01       	movw	r20, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <MGPIO_SetPortDirection+0x100>
 20e:	44 0f       	add	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <MGPIO_SetPortDirection+0xfc>
 216:	ba 01       	movw	r22, r20
 218:	60 95       	com	r22
 21a:	62 23       	and	r22, r18
 21c:	61 bb       	out	0x11, r22	; 17
#include "MGPIO_config.h"


bool_t MGPIO_SetPortDirection( u8 Copy_Port, u8 Copy_Pin, u8 Copy_ProtDir)
{
	bool_t ret_val = E_TRUE;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
	{
		if     (Copy_Port == PORTA)  SET_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  SET_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  SET_BIT(DIR_DDRC,Copy_Pin);
		else if(Copy_Port == PORTD)  SET_BIT(DIR_DDRD,Copy_Pin);
		else ret_val = E_FALSE;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
	{
		if     (Copy_Port == PORTA)  CLR_BIT(DIR_DDRA,Copy_Pin);
		else if(Copy_Port == PORTB)  CLR_BIT(DIR_DDRB,Copy_Pin);
		else if(Copy_Port == PORTC)  CLR_BIT(DIR_DDRC,Copy_Pin);
		else if(Copy_Port == PORTD)  CLR_BIT(DIR_DDRD,Copy_Pin);
		else ret_val = E_FALSE;
 226:	80 e0       	ldi	r24, 0x00	; 0
		
	}
	return ret_val;
}
 228:	08 95       	ret

0000022a <__vector_13>:
static void (*uart_RxCallBack)(void);
static void (*uart_TxCallBack)(void);


ISR(USART_RXC_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	(*uart_RxCallBack)();
 24c:	e0 91 6c 00 	lds	r30, 0x006C
 250:	f0 91 6d 00 	lds	r31, 0x006D
 254:	09 95       	icall
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_15>:

ISR(USART_TXC_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	(*uart_TxCallBack)();
 29a:	e0 91 6e 00 	lds	r30, 0x006E
 29e:	f0 91 6f 00 	lds	r31, 0x006F
 2a2:	09 95       	icall
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_14>:


ISR(USART_UDRE_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	(*uart_TxCallBack)();
 2e8:	e0 91 6e 00 	lds	r30, 0x006E
 2ec:	f0 91 6f 00 	lds	r31, 0x006F
 2f0:	09 95       	icall
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <MUART_boolInit>:


bool_t MUART_boolInit(gstr_uart_t *obj)
{
 314:	fc 01       	movw	r30, r24
	bool_t ret_val = E_TRUE;
	if(obj != NULL)
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	09 f4       	brne	.+2      	; 0x31c <MUART_boolInit+0x8>
 31a:	a7 c0       	rjmp	.+334    	; 0x46a <MUART_boolInit+0x156>
	{
	/**set the URSEL bit to can writing on UCSRC register SET_BIT(UCSRC,URSEL);***/
			SET_BIT(UCSRC,URSEL);
 31c:	80 b5       	in	r24, 0x20	; 32
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	80 bd       	out	0x20, r24	; 32
			/*******mode selection*******/
		if(obj->usart_mode==ASYENCHRONOUS_USART)
 322:	87 81       	ldd	r24, Z+7	; 0x07
 324:	81 11       	cpse	r24, r1
 326:	03 c0       	rjmp	.+6      	; 0x32e <MUART_boolInit+0x1a>
			CLR_BIT(UCSRC,UMSEL);
 328:	80 b5       	in	r24, 0x20	; 32
 32a:	8f 7b       	andi	r24, 0xBF	; 191
 32c:	80 bd       	out	0x20, r24	; 32
			/******parity selection*******/
		if(obj->parity==USART_PARITY_OFF)
 32e:	80 85       	ldd	r24, Z+8	; 0x08
 330:	81 11       	cpse	r24, r1
 332:	07 c0       	rjmp	.+14     	; 0x342 <MUART_boolInit+0x2e>
			{
				CLR_BIT(UCSRC,UPM0);
 334:	80 b5       	in	r24, 0x20	; 32
 336:	8f 7e       	andi	r24, 0xEF	; 239
 338:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UPM1);
 33a:	80 b5       	in	r24, 0x20	; 32
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	80 bd       	out	0x20, r24	; 32
 340:	0f c0       	rjmp	.+30     	; 0x360 <MUART_boolInit+0x4c>
			}
		else if(obj->parity==USART_PARITY_EVEN)
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	39 f4       	brne	.+14     	; 0x354 <MUART_boolInit+0x40>
			{
				CLR_BIT(UCSRC,UPM0);
 346:	80 b5       	in	r24, 0x20	; 32
 348:	8f 7e       	andi	r24, 0xEF	; 239
 34a:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
 34c:	80 b5       	in	r24, 0x20	; 32
 34e:	80 62       	ori	r24, 0x20	; 32
 350:	80 bd       	out	0x20, r24	; 32
 352:	06 c0       	rjmp	.+12     	; 0x360 <MUART_boolInit+0x4c>
			}
		else
			{
				SET_BIT(UCSRC,UPM0);
 354:	80 b5       	in	r24, 0x20	; 32
 356:	80 61       	ori	r24, 0x10	; 16
 358:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	80 62       	ori	r24, 0x20	; 32
 35e:	80 bd       	out	0x20, r24	; 32
			}
	  /***********stop bit number**********/
		if(obj->stop_bit_num==USART_ONE_STOP_BIT)
 360:	81 85       	ldd	r24, Z+9	; 0x09
 362:	81 11       	cpse	r24, r1
 364:	04 c0       	rjmp	.+8      	; 0x36e <MUART_boolInit+0x5a>
				CLR_BIT(UCSRC,USBS);
 366:	80 b5       	in	r24, 0x20	; 32
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	80 bd       	out	0x20, r24	; 32
 36c:	03 c0       	rjmp	.+6      	; 0x374 <MUART_boolInit+0x60>
		else
		     	SET_BIT(UCSRC,USBS);
 36e:	80 b5       	in	r24, 0x20	; 32
 370:	88 60       	ori	r24, 0x08	; 8
 372:	80 bd       	out	0x20, r24	; 32
	 /***********data size send**********/
		if(obj->data_size==USART_8_BITS)
 374:	82 85       	ldd	r24, Z+10	; 0x0a
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	41 f4       	brne	.+16     	; 0x38a <MUART_boolInit+0x76>
			{
				//UCSRC |=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
				SET_BIT(UCSRC,UCSZ0);
 37a:	80 b5       	in	r24, 0x20	; 32
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ1);
 380:	80 b5       	in	r24, 0x20	; 32
 382:	84 60       	ori	r24, 0x04	; 4
 384:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRB,UCSZ2);
 386:	52 98       	cbi	0x0a, 2	; 10
 388:	2d c0       	rjmp	.+90     	; 0x3e4 <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_5_BITS)
 38a:	81 11       	cpse	r24, r1
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <MUART_boolInit+0x8e>
			{
			//UCSRC &=~(1<<UCSZ1)&(1<<UCSZ1)|(1<<URSEL);
			CLR_BIT(UCSRC,UCSZ0);
 38e:	80 b5       	in	r24, 0x20	; 32
 390:	8d 7f       	andi	r24, 0xFD	; 253
 392:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ1);
 394:	80 b5       	in	r24, 0x20	; 32
 396:	8b 7f       	andi	r24, 0xFB	; 251
 398:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ2);
 39a:	80 b5       	in	r24, 0x20	; 32
 39c:	8b 7f       	andi	r24, 0xFB	; 251
 39e:	80 bd       	out	0x20, r24	; 32
 3a0:	21 c0       	rjmp	.+66     	; 0x3e4 <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_6_BITS)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	51 f4       	brne	.+20     	; 0x3ba <MUART_boolInit+0xa6>
			{
			SET_BIT(UCSRC,UCSZ0);
 3a6:	80 b5       	in	r24, 0x20	; 32
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ1);
 3ac:	80 b5       	in	r24, 0x20	; 32
 3ae:	8b 7f       	andi	r24, 0xFB	; 251
 3b0:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ2);
 3b2:	80 b5       	in	r24, 0x20	; 32
 3b4:	8b 7f       	andi	r24, 0xFB	; 251
 3b6:	80 bd       	out	0x20, r24	; 32
 3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_7_BITS)
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	51 f4       	brne	.+20     	; 0x3d2 <MUART_boolInit+0xbe>
			{
				CLR_BIT(UCSRC,UCSZ0);
 3be:	80 b5       	in	r24, 0x20	; 32
 3c0:	8d 7f       	andi	r24, 0xFD	; 253
 3c2:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ1);
 3c4:	80 b5       	in	r24, 0x20	; 32
 3c6:	84 60       	ori	r24, 0x04	; 4
 3c8:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UCSZ2);
 3ca:	80 b5       	in	r24, 0x20	; 32
 3cc:	8b 7f       	andi	r24, 0xFB	; 251
 3ce:	80 bd       	out	0x20, r24	; 32
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <MUART_boolInit+0xd0>
			}
		else 
			{
			SET_BIT(UCSRC,UCSZ0);
 3d2:	80 b5       	in	r24, 0x20	; 32
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ1);
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ2);
 3de:	80 b5       	in	r24, 0x20	; 32
 3e0:	84 60       	ori	r24, 0x04	; 4
 3e2:	80 bd       	out	0x20, r24	; 32
			}
	/************ clock polarity selection******/
		if(obj->clock_polarity==USART_RISING_EDEG)
 3e4:	83 85       	ldd	r24, Z+11	; 0x0b
 3e6:	81 11       	cpse	r24, r1
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <MUART_boolInit+0xde>
			CLR_BIT(UCSRC,UCPOL);
 3ea:	80 b5       	in	r24, 0x20	; 32
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	80 bd       	out	0x20, r24	; 32
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <MUART_boolInit+0xe4>
		else
			SET_BIT(UCSRC,UCPOL);
 3f2:	80 b5       	in	r24, 0x20	; 32
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 bd       	out	0x20, r24	; 32
	/*********** RX enable*****************/
		if(obj->rx_enable==UART_RX_ON)
 3f8:	81 81       	ldd	r24, Z+1	; 0x01
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	11 f4       	brne	.+4      	; 0x402 <MUART_boolInit+0xee>
			SET_BIT(UCSRB,RXEN);	
 3fe:	54 9a       	sbi	0x0a, 4	; 10
 400:	01 c0       	rjmp	.+2      	; 0x404 <MUART_boolInit+0xf0>
		else
			CLR_BIT(UCSRB,RXEN);
 402:	54 98       	cbi	0x0a, 4	; 10
	/*************** TX enable************/
		if(obj->tx_enable==UART_TX_ON)
 404:	80 81       	ld	r24, Z
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	11 f4       	brne	.+4      	; 0x40e <MUART_boolInit+0xfa>
			SET_BIT(UCSRB,TXEN);
 40a:	53 9a       	sbi	0x0a, 3	; 10
 40c:	01 c0       	rjmp	.+2      	; 0x410 <MUART_boolInit+0xfc>
		else
			CLR_BIT(UCSRB,TXEN);
 40e:	53 98       	cbi	0x0a, 3	; 10
	/*********TX interrupt enable*******/	
		if(obj->tx_interrupt_enable==UART_TX__INT_ON)
 410:	83 81       	ldd	r24, Z+3	; 0x03
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	11 f4       	brne	.+4      	; 0x41a <MUART_boolInit+0x106>
			SET_BIT(UCSRB,TXCIE);
 416:	56 9a       	sbi	0x0a, 6	; 10
 418:	01 c0       	rjmp	.+2      	; 0x41c <MUART_boolInit+0x108>
		else
			CLR_BIT(UCSRB,TXCIE);
 41a:	56 98       	cbi	0x0a, 6	; 10
   /*********RX interrupt enable********/
		if(obj->rx_interrupt_enable==UART_RX__INT_ON)
 41c:	82 81       	ldd	r24, Z+2	; 0x02
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	11 f4       	brne	.+4      	; 0x426 <MUART_boolInit+0x112>
			SET_BIT(UCSRB,RXCIE);
 422:	57 9a       	sbi	0x0a, 7	; 10
 424:	01 c0       	rjmp	.+2      	; 0x428 <MUART_boolInit+0x114>
		else
			CLR_BIT(UCSRB,RXCIE);
 426:	57 98       	cbi	0x0a, 7	; 10
	/**********UDRIE interrupt enable********/
		if(obj->UDRIE_interrupt_enable==UART_UDRIE__INT_ON)
 428:	84 81       	ldd	r24, Z+4	; 0x04
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	11 f4       	brne	.+4      	; 0x432 <MUART_boolInit+0x11e>
			SET_BIT(UCSRB,UDRIE);
 42e:	55 9a       	sbi	0x0a, 5	; 10
 430:	01 c0       	rjmp	.+2      	; 0x434 <MUART_boolInit+0x120>
		else
			CLR_BIT(UCSRB,UDRIE);
 432:	55 98       	cbi	0x0a, 5	; 10
	/************Baud rate setting***********/
		if(obj->baud_rate==BAUD_RATE_9600)
 434:	85 81       	ldd	r24, Z+5	; 0x05
 436:	96 81       	ldd	r25, Z+6	; 0x06
 438:	80 38       	cpi	r24, 0x80	; 128
 43a:	25 e2       	ldi	r18, 0x25	; 37
 43c:	92 07       	cpc	r25, r18
 43e:	21 f4       	brne	.+8      	; 0x448 <MUART_boolInit+0x134>
		{
			UBRL =0x33;
 440:	83 e3       	ldi	r24, 0x33	; 51
 442:	89 b9       	out	0x09, r24	; 9
			UBRH =0x00;
 444:	10 bc       	out	0x20, r1	; 32
 446:	0c c0       	rjmp	.+24     	; 0x460 <MUART_boolInit+0x14c>
		}
		else if(obj->baud_rate==BAUD_RATE_2400)
 448:	80 36       	cpi	r24, 0x60	; 96
 44a:	29 e0       	ldi	r18, 0x09	; 9
 44c:	92 07       	cpc	r25, r18
 44e:	19 f4       	brne	.+6      	; 0x456 <MUART_boolInit+0x142>
		{
			UBRL =0x00;
 450:	19 b8       	out	0x09, r1	; 9
			UBRH =0x00;
 452:	10 bc       	out	0x20, r1	; 32
 454:	05 c0       	rjmp	.+10     	; 0x460 <MUART_boolInit+0x14c>
		}
		else if(obj->baud_rate==BAUD_RATE_4800)
 456:	80 3c       	cpi	r24, 0xC0	; 192
 458:	92 41       	sbci	r25, 0x12	; 18
 45a:	11 f4       	brne	.+4      	; 0x460 <MUART_boolInit+0x14c>
		{
			UBRL =0x00;
 45c:	19 b8       	out	0x09, r1	; 9
			UBRH =0x00;
 45e:	10 bc       	out	0x20, r1	; 32
		}
		
		/***turn on the galoble interrupt***/
		SET_BIT(SREG,7);
 460:	8f b7       	in	r24, 0x3f	; 63
 462:	80 68       	ori	r24, 0x80	; 128
 464:	8f bf       	out	0x3f, r24	; 63
}


bool_t MUART_boolInit(gstr_uart_t *obj)
{
	bool_t ret_val = E_TRUE;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret
		/***turn on the galoble interrupt***/
		SET_BIT(SREG,7);
	}
	else
	{
		 ret_val=E_FALSE;
 46a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ret_val;	
}
 46c:	08 95       	ret

0000046e <MUART_voidTransmitChar>:

void MUART_voidTransmitChar(u8 copy_u8Data)
{
	UDR = copy_u8Data;
 46e:	8c b9       	out	0x0c, r24	; 12
	while(!GET_BIT(UCSRA,UDRE));
 470:	5d 9b       	sbis	0x0b, 5	; 11
 472:	fe cf       	rjmp	.-4      	; 0x470 <MUART_voidTransmitChar+0x2>
}
 474:	08 95       	ret

00000476 <main>:
#include "STD_TYPES.h"
#include "Safe_interface.h"

int main(void)
{
	Safe_Init();
 476:	0e 94 40 02 	call	0x480	; 0x480 <Safe_Init>

	 while(1)
    {
		Safe_Start();
 47a:	0e 94 4a 02 	call	0x494	; 0x494 <Safe_Start>
 47e:	fd cf       	rjmp	.-6      	; 0x47a <main+0x4>

00000480 <Safe_Init>:
	MUART_voidDeinitTransmition(&obj);
}

void Safe_Init(void)
{
	MGPIO_SetPortDirection(PORTB,PIN5,INPUT);
 480:	88 b3       	in	r24, 0x18	; 24
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	65 e0       	ldi	r22, 0x05	; 5
 486:	0e 94 89 00 	call	0x112	; 0x112 <MGPIO_SetPortDirection>
	MUART_boolInit(&obj) ;
 48a:	80 e6       	ldi	r24, 0x60	; 96
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 8a 01 	call	0x314	; 0x314 <MUART_boolInit>
 492:	08 95       	ret

00000494 <Safe_Start>:
}


void Safe_Start(void)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
	for(u8 i =0;i<4;i++)
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d1 e0       	ldi	r29, 0x01	; 1
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <Safe_Start+0xc>
 49e:	cd 2f       	mov	r28, r29
	{
		PressedKey = KeyPad_getPressedKey();
 4a0:	0e 94 57 00 	call	0xae	; 0xae <KeyPad_getPressedKey>
 4a4:	80 93 70 00 	sts	0x0070, r24
		MUART_voidTransmitChar(PressedKey);
 4a8:	0e 94 37 02 	call	0x46e	; 0x46e <MUART_voidTransmitChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ac:	2f e9       	ldi	r18, 0x9F	; 159
 4ae:	86 e8       	ldi	r24, 0x86	; 134
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <Safe_Start+0x1e>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Safe_Start+0x28>
 4bc:	00 00       	nop
		_delay_ms(500);
		if(GET_BIT(IN_PINB,PIN5)==1)
 4be:	b5 99       	sbic	0x16, 5	; 22
 4c0:	ee cf       	rjmp	.-36     	; 0x49e <Safe_Start+0xa>
}


void Safe_Start(void)
{
	for(u8 i =0;i<4;i++)
 4c2:	cf 5f       	subi	r28, 0xFF	; 255
 4c4:	c4 30       	cpi	r28, 0x04	; 4
 4c6:	60 f3       	brcs	.-40     	; 0x4a0 <Safe_Start+0xc>
		{
			i=0;
		}
	}
	//stop_transmit();
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
