
lm35_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  0000075e  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000598  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c72  00000000  00000000  00002453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000453  00000000  00000000  000030c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003fb  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001bc  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000346  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000491  00000000  00000000  00003e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000042a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  8a:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_16>:
#include"common.h"
#include"hal_adc.h"

static void (*cb_adc)();
ISR(ADC_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	(*cb_adc)();
  b4:	e0 91 7a 00 	lds	r30, 0x007A
  b8:	f0 91 7b 00 	lds	r31, 0x007B
  bc:	09 95       	icall
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <hal_adc_init>:
	SREG|=(1<<7);
	ADCSRA|=(1<<3);
}

bool_t hal_adc_init(gstr_hal_adc_t *adc_info/*, void *cb_ptr*/)
{
  e0:	fc 01       	movw	r30, r24
	bool_t ret_val=E_TRUE;
	if(adc_info!=NULL)
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	31 f1       	breq	.+76     	; 0x132 <hal_adc_init+0x52>
	{
		cb_adc=(void(*)())(adc_info->hal_adc_cb);
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	90 93 7b 00 	sts	0x007B, r25
  ee:	80 93 7a 00 	sts	0x007A, r24
		/*ADC Enable*/
		ADCSRA|=(1<<7);
  f2:	37 9a       	sbi	0x06, 7	; 6
	(*cb_adc)();
}

static void interrupt_config()
{
	SREG|=(1<<7);
  f4:	8f b7       	in	r24, 0x3f	; 63
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	8f bf       	out	0x3f, r24	; 63
	ADCSRA|=(1<<3);
  fa:	33 9a       	sbi	0x06, 3	; 6
		/*ADC Enable*/
		ADCSRA|=(1<<7);
		interrupt_config();

		/*ADMUX Vref REFS0 , REFS1*/
		if(adc_info->volt_ref==AREF_INTERNAL)
  fc:	83 81       	ldd	r24, Z+3	; 0x03
  fe:	81 11       	cpse	r24, r1
 100:	05 c0       	rjmp	.+10     	; 0x10c <hal_adc_init+0x2c>
		{
			ADMUX &=~(1<<7)&~(1<<6);
 102:	87 b1       	in	r24, 0x07	; 7
 104:	8f 73       	andi	r24, 0x3F	; 63
 106:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<3);
}

bool_t hal_adc_init(gstr_hal_adc_t *adc_info/*, void *cb_ptr*/)
{
	bool_t ret_val=E_TRUE;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0c c0       	rjmp	.+24     	; 0x124 <hal_adc_init+0x44>
		/*ADMUX Vref REFS0 , REFS1*/
		if(adc_info->volt_ref==AREF_INTERNAL)
		{
			ADMUX &=~(1<<7)&~(1<<6);
		}
		else if(adc_info->volt_ref==EXTERNAL_VCC)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	11 f4       	brne	.+4      	; 0x114 <hal_adc_init+0x34>
		{
			ADMUX &=~(1<<7)|(1<<6);
 110:	3f 98       	cbi	0x07, 7	; 7
 112:	08 c0       	rjmp	.+16     	; 0x124 <hal_adc_init+0x44>
		}
		else if(adc_info->volt_ref==INERNAL_265_VREF)
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	29 f4       	brne	.+10     	; 0x122 <hal_adc_init+0x42>
		{
			ADMUX |=(1<<7)|(1<<6);
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	80 6c       	ori	r24, 0xC0	; 192
 11c:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<3);
}

bool_t hal_adc_init(gstr_hal_adc_t *adc_info/*, void *cb_ptr*/)
{
	bool_t ret_val=E_TRUE;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <hal_adc_init+0x44>
		{
			ADMUX |=(1<<7)|(1<<6);
		}
		else
		{
			ret_val=E_FALSE;
 122:	80 e0       	ldi	r24, 0x00	; 0
		}

		if(adc_info->freq==PRESCALER_128)
 124:	92 81       	ldd	r25, Z+2	; 0x02
 126:	96 30       	cpi	r25, 0x06	; 6
 128:	31 f4       	brne	.+12     	; 0x136 <hal_adc_init+0x56>
		{
			/*ADCSRA  prescaler config*/
			ADCSRA |=(1<<2)|(1<<1)|(1<<0);
 12a:	96 b1       	in	r25, 0x06	; 6
 12c:	97 60       	ori	r25, 0x07	; 7
 12e:	96 b9       	out	0x06, r25	; 6
 130:	08 95       	ret
		}

	}
	else
	{
		 ret_val=E_FALSE;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
			/*ADCSRA  prescaler config*/
			ADCSRA |=(1<<2)|(1<<1)|(1<<0);
		}
		else
		{
			ret_val=E_FALSE;
 136:	80 e0       	ldi	r24, 0x00	; 0
		 ret_val=E_FALSE;
	}


	return ret_val;
}
 138:	08 95       	ret

0000013a <hal_adc_read_channel>:

bool_t hal_adc_read_channel(ecore_u8 channel)
{
	bool_t ret_val=E_TRUE;

	if(channel<8)
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	b8 f4       	brcc	.+46     	; 0x16c <hal_adc_read_channel+0x32>
	{
		/*portA input*/
		 DDRA|=(1<<channel);
 13e:	9a b3       	in	r25, 0x1a	; 26
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	9a 01       	movw	r18, r20
 146:	08 2e       	mov	r0, r24
 148:	02 c0       	rjmp	.+4      	; 0x14e <hal_adc_read_channel+0x14>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <hal_adc_read_channel+0x10>
 152:	29 2b       	or	r18, r25
 154:	2a bb       	out	0x1a, r18	; 26
		/*channel select*/
		 ADMUX|=(ADMUX & 0xf0)|channel;
 156:	27 b1       	in	r18, 0x07	; 7
 158:	97 b1       	in	r25, 0x07	; 7
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	92 2b       	or	r25, r18
 15e:	89 2b       	or	r24, r25
 160:	87 b9       	out	0x07, r24	; 7
		/* ADCSRA ADC start convertion*/
		 ADCSRA |=(1<<6)|(1<<5);
 162:	86 b1       	in	r24, 0x06	; 6
 164:	80 66       	ori	r24, 0x60	; 96
 166:	86 b9       	out	0x06, r24	; 6



bool_t hal_adc_read_channel(ecore_u8 channel)
{
	bool_t ret_val=E_TRUE;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret
		 DDRB=0xff;
		 PORB=ADCL;*/
	}
	else
	{
		 ret_val=E_FALSE;
 16c:	80 e0       	ldi	r24, 0x00	; 0
	}


	return ret_val;
}
 16e:	08 95       	ret

00000170 <Lcd_Send_Command>:

bool_t Lcd_Send_Command(ecore_u8 comm)
{
	bool_t ret_val=E_TRUE;
	/* Clear RS, RW */
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RS);
 170:	90 98       	cbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 172:	91 98       	cbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	ef ec       	ldi	r30, 0xCF	; 207
 176:	f7 e0       	ldi	r31, 0x07	; 7
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <Lcd_Send_Command+0x8>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <Lcd_Send_Command+0xe>
 17e:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 180:	92 98       	cbi	0x12, 2	; 18
 182:	ef ec       	ldi	r30, 0xCF	; 207
 184:	f7 e0       	ldi	r31, 0x07	; 7
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Lcd_Send_Command+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Lcd_Send_Command+0x1c>
 18c:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
		_delay_ms(1);

#elif(DATA_BITS_MODE==8)
		LCD_DATA_PORT_PORT=comm;
 18e:	85 bb       	out	0x15, r24	; 21
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <Lcd_Send_Command+0x24>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Lcd_Send_Command+0x2a>
 19a:	00 00       	nop
		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 19c:	92 9a       	sbi	0x12, 2	; 18
 19e:	ef ec       	ldi	r30, 0xCF	; 207
 1a0:	f7 e0       	ldi	r31, 0x07	; 7
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Lcd_Send_Command+0x32>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Lcd_Send_Command+0x38>
 1a8:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 1aa:	92 98       	cbi	0x12, 2	; 18
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <Lcd_Send_Command+0x40>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <Lcd_Send_Command+0x46>
 1b6:	00 00       	nop

#endif


	return ret_val;
}
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret

000001bc <Lcd_Init>:

bool_t Lcd_Init()
{
	bool_t ret_val=E_TRUE;
	/* set lcd data port and RS E Rw as output  */
	LCD_CNTR_PORT_DIR |=(1<<RS)|(1<<RW)|(1<<E);
 1bc:	81 b3       	in	r24, 0x11	; 17
 1be:	87 60       	ori	r24, 0x07	; 7
 1c0:	81 bb       	out	0x11, r24	; 17
	       LCD_DATA_PORT_DIR=0x0f; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
	       Lcd_Send_Command(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
	       Lcd_Send_Command(TWO_LINE_LCD_Four_BIT_MODE);
    #elif(DATA_BITS_MODE == 8)
	       LCD_DATA_PORT_DIR=0xff; /* initialize LCD in 8-bit mode */
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 bb       	out	0x14, r24	; 20
	       Lcd_Send_Command(TWO_LINE_LCD_Eight_BIT_MODE);
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	0e 94 b8 00 	call	0x170	; 0x170 <Lcd_Send_Command>
	#endif
	Lcd_Send_Command(CURSOR_OFF);
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 b8 00 	call	0x170	; 0x170 <Lcd_Send_Command>
	Lcd_Send_Command(CLEAR_COMMAND);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 b8 00 	call	0x170	; 0x170 <Lcd_Send_Command>

	return ret_val;
}
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret

000001dc <Lcd_Display_Character>:

bool_t Lcd_Display_Character(ecore_u8 ch)
{
	bool_t ret_val=E_TRUE;
	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
 1dc:	90 9a       	sbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 1de:	91 98       	cbi	0x12, 1	; 18
 1e0:	ef ec       	ldi	r30, 0xCF	; 207
 1e2:	f7 e0       	ldi	r31, 0x07	; 7
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Lcd_Display_Character+0x8>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <Lcd_Display_Character+0xe>
 1ea:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 1ec:	92 98       	cbi	0x12, 2	; 18
 1ee:	ef ec       	ldi	r30, 0xCF	; 207
 1f0:	f7 e0       	ldi	r31, 0x07	; 7
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_Display_Character+0x16>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_Display_Character+0x1c>
 1f8:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
		_delay_ms(1);

#elif(DATA_BITS_MODE==8)
		LCD_DATA_PORT_PORT=ch;
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	8f ec       	ldi	r24, 0xCF	; 207
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <Lcd_Display_Character+0x24>
 204:	00 c0       	rjmp	.+0      	; 0x206 <Lcd_Display_Character+0x2a>
 206:	00 00       	nop
		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 208:	92 9a       	sbi	0x12, 2	; 18
 20a:	ef ec       	ldi	r30, 0xCF	; 207
 20c:	f7 e0       	ldi	r31, 0x07	; 7
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <Lcd_Display_Character+0x32>
 212:	00 c0       	rjmp	.+0      	; 0x214 <Lcd_Display_Character+0x38>
 214:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 216:	92 98       	cbi	0x12, 2	; 18
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <Lcd_Display_Character+0x40>
 220:	00 c0       	rjmp	.+0      	; 0x222 <Lcd_Display_Character+0x46>
 222:	00 00       	nop


#endif

	return ret_val;
}
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret

00000228 <Lcd_Display_String>:
	return ret_val;
	
}

bool_t Lcd_Display_String(const ecore_u8* str)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	bool_t ret_val=E_TRUE;

	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
 22e:	90 9a       	sbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 230:	91 98       	cbi	0x12, 1	; 18

	while(*str){
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <Lcd_Display_String+0x1c>

	return ret_val;
	
}

bool_t Lcd_Display_String(const ecore_u8* str)
 238:	21 96       	adiw	r28, 0x01	; 1
	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);

	while(*str){
		Lcd_Display_Character(*str);
 23a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Lcd_Display_Character>

	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);

	while(*str){
 23e:	89 91       	ld	r24, Y+
 240:	81 11       	cpse	r24, r1
 242:	fb cf       	rjmp	.-10     	; 0x23a <Lcd_Display_String+0x12>
	_delay_ms(1);*/
	str++;
	}

	return ret_val;
}
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <LCD_goToRowColumn>:
{
	bool_t ret_val=E_TRUE;

	 static	ecore_u8 Address;

	switch(row)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	49 f0       	breq	.+18     	; 0x262 <LCD_goToRowColumn+0x16>
 250:	28 f0       	brcs	.+10     	; 0x25c <LCD_goToRowColumn+0x10>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	51 f0       	breq	.+20     	; 0x26a <LCD_goToRowColumn+0x1e>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	79 f4       	brne	.+30     	; 0x278 <LCD_goToRowColumn+0x2c>
 25a:	0b c0       	rjmp	.+22     	; 0x272 <LCD_goToRowColumn+0x26>
		{
			case 0:
					Address=col;
 25c:	60 93 7c 00 	sts	0x007C, r22
					break;
 260:	0b c0       	rjmp	.+22     	; 0x278 <LCD_goToRowColumn+0x2c>
			case 1:
					Address=col+0x40;
 262:	60 5c       	subi	r22, 0xC0	; 192
 264:	60 93 7c 00 	sts	0x007C, r22
					break;
 268:	07 c0       	rjmp	.+14     	; 0x278 <LCD_goToRowColumn+0x2c>
			case 2:
					Address=col+0x10;
 26a:	60 5f       	subi	r22, 0xF0	; 240
 26c:	60 93 7c 00 	sts	0x007C, r22
					break;
 270:	03 c0       	rjmp	.+6      	; 0x278 <LCD_goToRowColumn+0x2c>
			case 3:
					Address=col+0x50;
 272:	60 5b       	subi	r22, 0xB0	; 176
 274:	60 93 7c 00 	sts	0x007C, r22
					break;
		}
	 /* we need to apply the corresponding command 0b10000000+Address */
	Lcd_Send_Command(Address | SET_CURSOR_LOCATION);
 278:	80 91 7c 00 	lds	r24, 0x007C
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	0e 94 b8 00 	call	0x170	; 0x170 <Lcd_Send_Command>



	return ret_val;
}
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret

00000286 <LCD_Display_RowColumn>:

bool_t LCD_Display_RowColumn(ecore_u8 row, ecore_u8 col, const ecore_u8* str)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ea 01       	movw	r28, r20

	bool_t ret_val=E_TRUE;

	 LCD_goToRowColumn(row, col);
 28c:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_goToRowColumn>
	 Lcd_Display_String(str);
 290:	ce 01       	movw	r24, r28
 292:	0e 94 14 01 	call	0x228	; 0x228 <Lcd_Display_String>

	return ret_val;
}
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <test>:
 *  Author: M.Aboelsaoud
 */ 
#include "hal_adc.h"
#include "lcd_driver.h"
void test()
{
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	2b 97       	sbiw	r28, 0x0b	; 11
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
	ecore_u8 arr[11]="0123456789";
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	e2 e6       	ldi	r30, 0x62	; 98
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	de 01       	movw	r26, r28
 2c6:	11 96       	adiw	r26, 0x01	; 1
 2c8:	01 90       	ld	r0, Z+
 2ca:	0d 92       	st	X+, r0
 2cc:	8a 95       	dec	r24
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <test+0x2a>
	ecore_u16 reading = ADCL+(ADCH*256);
 2d0:	24 b1       	in	r18, 0x04	; 4
 2d2:	35 b1       	in	r19, 0x05	; 5
 2d4:	93 2f       	mov	r25, r19
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	bc 01       	movw	r22, r24
 2da:	62 0f       	add	r22, r18
 2dc:	71 1d       	adc	r23, r1
	reading*=4.88;
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__floatunsisf>
 2e6:	26 ef       	ldi	r18, 0xF6	; 246
 2e8:	38 e2       	ldi	r19, 0x28	; 40
 2ea:	4c e9       	ldi	r20, 0x9C	; 156
 2ec:	50 e4       	ldi	r21, 0x40	; 64
 2ee:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
 2f2:	0e 94 2d 02 	call	0x45a	; 0x45a <__fixunssfsi>
 2f6:	6b 01       	movw	r12, r22
 2f8:	7c 01       	movw	r14, r24
 2fa:	8b 01       	movw	r16, r22
	LCD_Display_RowColumn(1,4,arr[reading/100%10]);
 2fc:	9b 01       	movw	r18, r22
 2fe:	36 95       	lsr	r19
 300:	27 95       	ror	r18
 302:	36 95       	lsr	r19
 304:	27 95       	ror	r18
 306:	ab e7       	ldi	r26, 0x7B	; 123
 308:	b4 e1       	ldi	r27, 0x14	; 20
 30a:	0e 94 4a 03 	call	0x694	; 0x694 <__umulhisi3>
 30e:	ac 01       	movw	r20, r24
 310:	56 95       	lsr	r21
 312:	47 95       	ror	r20
 314:	9a 01       	movw	r18, r20
 316:	ad ec       	ldi	r26, 0xCD	; 205
 318:	bc ec       	ldi	r27, 0xCC	; 204
 31a:	0e 94 4a 03 	call	0x694	; 0x694 <__umulhisi3>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	9c 01       	movw	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	48 1b       	sub	r20, r24
 342:	59 0b       	sbc	r21, r25
 344:	e1 e0       	ldi	r30, 0x01	; 1
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	e4 0f       	add	r30, r20
 34e:	f5 1f       	adc	r31, r21
 350:	40 81       	ld	r20, Z
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	64 e0       	ldi	r22, 0x04	; 4
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Display_RowColumn>
	LCD_Display_RowColumn(1,5,arr[reading/10%10]);
 35c:	96 01       	movw	r18, r12
 35e:	ad ec       	ldi	r26, 0xCD	; 205
 360:	bc ec       	ldi	r27, 0xCC	; 204
 362:	0e 94 4a 03 	call	0x694	; 0x694 <__umulhisi3>
 366:	7c 01       	movw	r14, r24
 368:	f6 94       	lsr	r15
 36a:	e7 94       	ror	r14
 36c:	f6 94       	lsr	r15
 36e:	e7 94       	ror	r14
 370:	f6 94       	lsr	r15
 372:	e7 94       	ror	r14
 374:	97 01       	movw	r18, r14
 376:	0e 94 4a 03 	call	0x694	; 0x694 <__umulhisi3>
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	9c 01       	movw	r18, r24
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	f7 01       	movw	r30, r14
 39e:	e8 1b       	sub	r30, r24
 3a0:	f9 0b       	sbc	r31, r25
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	8c 0f       	add	r24, r28
 3a8:	9d 1f       	adc	r25, r29
 3aa:	e8 0f       	add	r30, r24
 3ac:	f9 1f       	adc	r31, r25
 3ae:	40 81       	ld	r20, Z
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	65 e0       	ldi	r22, 0x05	; 5
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Display_RowColumn>
	LCD_Display_RowColumn(1,6,".");
 3ba:	40 e6       	ldi	r20, 0x60	; 96
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	66 e0       	ldi	r22, 0x06	; 6
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Display_RowColumn>
	LCD_Display_RowColumn(1,7,arr[reading%10]);
 3c6:	c7 01       	movw	r24, r14
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	ee 0c       	add	r14, r14
 3ce:	ff 1c       	adc	r15, r15
 3d0:	ee 0c       	add	r14, r14
 3d2:	ff 1c       	adc	r15, r15
 3d4:	ee 0c       	add	r14, r14
 3d6:	ff 1c       	adc	r15, r15
 3d8:	e8 0e       	add	r14, r24
 3da:	f9 1e       	adc	r15, r25
 3dc:	0e 19       	sub	r16, r14
 3de:	1f 09       	sbc	r17, r15
 3e0:	e1 e0       	ldi	r30, 0x01	; 1
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ec 0f       	add	r30, r28
 3e6:	fd 1f       	adc	r31, r29
 3e8:	e0 0f       	add	r30, r16
 3ea:	f1 1f       	adc	r31, r17
 3ec:	40 81       	ld	r20, Z
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	67 e0       	ldi	r22, 0x07	; 7
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Display_RowColumn>
	/*Lcd_Display_Character(arr[reading/100%10]);
	Lcd_Display_Character(arr[reading/10%10]);
	Lcd_Display_Character(arr[reading%10]);*/
	PORB=ADCL;
 3f8:	84 b1       	in	r24, 0x04	; 4
 3fa:	88 bb       	out	0x18, r24	; 24
	/*PORTD=ADCH;*/
}
 3fc:	2b 96       	adiw	r28, 0x0b	; 11
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <main>:
int main(void)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <main+0x6>
 420:	00 d0       	rcall	.+0      	; 0x422 <main+0x8>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xff;
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	87 bb       	out	0x17, r24	; 23
	gstr_hal_adc_t obg1=
 42a:	8f e4       	ldi	r24, 0x4F	; 79
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	9a 83       	std	Y+2, r25	; 0x02
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	8b 83       	std	Y+3, r24	; 0x03
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	8c 83       	std	Y+4, r24	; 0x04
	{
		.hal_adc_cb=test,
		.freq=PRESCALER_128,
		.volt_ref=INERNAL_265_VREF,
	};
	Lcd_Init();
 43a:	0e 94 de 00 	call	0x1bc	; 0x1bc <Lcd_Init>
	LCD_Display_RowColumn(0,2,"THE TEMP IS ");
 43e:	4d e6       	ldi	r20, 0x6D	; 109
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 43 01 	call	0x286	; 0x286 <LCD_Display_RowColumn>
	hal_adc_init(&obg1);
 44a:	ce 01       	movw	r24, r28
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	0e 94 70 00 	call	0xe0	; 0xe0 <hal_adc_init>
	hal_adc_read_channel(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 9d 00 	call	0x13a	; 0x13a <hal_adc_read_channel>
 458:	ff cf       	rjmp	.-2      	; 0x458 <main+0x3e>

0000045a <__fixunssfsi>:
 45a:	70 d0       	rcall	.+224    	; 0x53c <__fp_splitA>
 45c:	88 f0       	brcs	.+34     	; 0x480 <__fixunssfsi+0x26>
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	90 f0       	brcs	.+36     	; 0x486 <__fixunssfsi+0x2c>
 462:	b9 2f       	mov	r27, r25
 464:	99 27       	eor	r25, r25
 466:	b7 51       	subi	r27, 0x17	; 23
 468:	a0 f0       	brcs	.+40     	; 0x492 <__fixunssfsi+0x38>
 46a:	d1 f0       	breq	.+52     	; 0x4a0 <__fixunssfsi+0x46>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	1a f0       	brmi	.+6      	; 0x47c <__fixunssfsi+0x22>
 476:	ba 95       	dec	r27
 478:	c9 f7       	brne	.-14     	; 0x46c <__fixunssfsi+0x12>
 47a:	12 c0       	rjmp	.+36     	; 0x4a0 <__fixunssfsi+0x46>
 47c:	b1 30       	cpi	r27, 0x01	; 1
 47e:	81 f0       	breq	.+32     	; 0x4a0 <__fixunssfsi+0x46>
 480:	77 d0       	rcall	.+238    	; 0x570 <__fp_zero>
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	08 95       	ret
 486:	74 c0       	rjmp	.+232    	; 0x570 <__fp_zero>
 488:	67 2f       	mov	r22, r23
 48a:	78 2f       	mov	r23, r24
 48c:	88 27       	eor	r24, r24
 48e:	b8 5f       	subi	r27, 0xF8	; 248
 490:	39 f0       	breq	.+14     	; 0x4a0 <__fixunssfsi+0x46>
 492:	b9 3f       	cpi	r27, 0xF9	; 249
 494:	cc f3       	brlt	.-14     	; 0x488 <__fixunssfsi+0x2e>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b3 95       	inc	r27
 49e:	d9 f7       	brne	.-10     	; 0x496 <__fixunssfsi+0x3c>
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__fixunssfsi+0x56>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__floatunsisf>:
 4b2:	e8 94       	clt
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__floatsisf+0x12>

000004b6 <__floatsisf>:
 4b6:	97 fb       	bst	r25, 7
 4b8:	3e f4       	brtc	.+14     	; 0x4c8 <__floatsisf+0x12>
 4ba:	90 95       	com	r25
 4bc:	80 95       	com	r24
 4be:	70 95       	com	r23
 4c0:	61 95       	neg	r22
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	99 23       	and	r25, r25
 4ca:	a9 f0       	breq	.+42     	; 0x4f6 <__floatsisf+0x40>
 4cc:	f9 2f       	mov	r31, r25
 4ce:	96 e9       	ldi	r25, 0x96	; 150
 4d0:	bb 27       	eor	r27, r27
 4d2:	93 95       	inc	r25
 4d4:	f6 95       	lsr	r31
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f1 11       	cpse	r31, r1
 4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <__floatsisf+0x1c>
 4e2:	fa f4       	brpl	.+62     	; 0x522 <__floatsisf+0x6c>
 4e4:	bb 0f       	add	r27, r27
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__floatsisf+0x36>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	1b c0       	rjmp	.+54     	; 0x522 <__floatsisf+0x6c>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	16 c0       	rjmp	.+44     	; 0x522 <__floatsisf+0x6c>
 4f6:	88 23       	and	r24, r24
 4f8:	11 f0       	breq	.+4      	; 0x4fe <__floatsisf+0x48>
 4fa:	96 e9       	ldi	r25, 0x96	; 150
 4fc:	11 c0       	rjmp	.+34     	; 0x520 <__floatsisf+0x6a>
 4fe:	77 23       	and	r23, r23
 500:	21 f0       	breq	.+8      	; 0x50a <__floatsisf+0x54>
 502:	9e e8       	ldi	r25, 0x8E	; 142
 504:	87 2f       	mov	r24, r23
 506:	76 2f       	mov	r23, r22
 508:	05 c0       	rjmp	.+10     	; 0x514 <__floatsisf+0x5e>
 50a:	66 23       	and	r22, r22
 50c:	71 f0       	breq	.+28     	; 0x52a <__floatsisf+0x74>
 50e:	96 e8       	ldi	r25, 0x86	; 134
 510:	86 2f       	mov	r24, r22
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	2a f0       	brmi	.+10     	; 0x522 <__floatsisf+0x6c>
 518:	9a 95       	dec	r25
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	da f7       	brpl	.-10     	; 0x518 <__floatsisf+0x62>
 522:	88 0f       	add	r24, r24
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__fp_split3>:
 52c:	57 fd       	sbrc	r21, 7
 52e:	90 58       	subi	r25, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	59 f0       	breq	.+22     	; 0x54c <__fp_splitA+0x10>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	71 f0       	breq	.+28     	; 0x556 <__fp_splitA+0x1a>
 53a:	47 95       	ror	r20

0000053c <__fp_splitA>:
 53c:	88 0f       	add	r24, r24
 53e:	97 fb       	bst	r25, 7
 540:	99 1f       	adc	r25, r25
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_splitA+0x20>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	79 f0       	breq	.+30     	; 0x566 <__fp_splitA+0x2a>
 548:	87 95       	ror	r24
 54a:	08 95       	ret
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	55 1f       	adc	r21, r21
 554:	f2 cf       	rjmp	.-28     	; 0x53a <__fp_split3+0xe>
 556:	46 95       	lsr	r20
 558:	f1 df       	rcall	.-30     	; 0x53c <__fp_splitA>
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__fp_splitA+0x30>
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	99 1f       	adc	r25, r25
 564:	f1 cf       	rjmp	.-30     	; 0x548 <__fp_splitA+0xc>
 566:	86 95       	lsr	r24
 568:	71 05       	cpc	r23, r1
 56a:	61 05       	cpc	r22, r1
 56c:	08 94       	sec
 56e:	08 95       	ret

00000570 <__fp_zero>:
 570:	e8 94       	clt

00000572 <__fp_szero>:
 572:	bb 27       	eor	r27, r27
 574:	66 27       	eor	r22, r22
 576:	77 27       	eor	r23, r23
 578:	cb 01       	movw	r24, r22
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__mulsf3>:
 57e:	0b d0       	rcall	.+22     	; 0x596 <__mulsf3x>
 580:	78 c0       	rjmp	.+240    	; 0x672 <__fp_round>
 582:	69 d0       	rcall	.+210    	; 0x656 <__fp_pscA>
 584:	28 f0       	brcs	.+10     	; 0x590 <__mulsf3+0x12>
 586:	6e d0       	rcall	.+220    	; 0x664 <__fp_pscB>
 588:	18 f0       	brcs	.+6      	; 0x590 <__mulsf3+0x12>
 58a:	95 23       	and	r25, r21
 58c:	09 f0       	breq	.+2      	; 0x590 <__mulsf3+0x12>
 58e:	5a c0       	rjmp	.+180    	; 0x644 <__fp_inf>
 590:	5f c0       	rjmp	.+190    	; 0x650 <__fp_nan>
 592:	11 24       	eor	r1, r1
 594:	ee cf       	rjmp	.-36     	; 0x572 <__fp_szero>

00000596 <__mulsf3x>:
 596:	ca df       	rcall	.-108    	; 0x52c <__fp_split3>
 598:	a0 f3       	brcs	.-24     	; 0x582 <__mulsf3+0x4>

0000059a <__mulsf3_pse>:
 59a:	95 9f       	mul	r25, r21
 59c:	d1 f3       	breq	.-12     	; 0x592 <__mulsf3+0x14>
 59e:	95 0f       	add	r25, r21
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	55 1f       	adc	r21, r21
 5a4:	62 9f       	mul	r22, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	72 9f       	mul	r23, r18
 5aa:	bb 27       	eor	r27, r27
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	63 9f       	mul	r22, r19
 5b2:	aa 27       	eor	r26, r26
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	aa 1f       	adc	r26, r26
 5ba:	64 9f       	mul	r22, r20
 5bc:	66 27       	eor	r22, r22
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	66 1f       	adc	r22, r22
 5c4:	82 9f       	mul	r24, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	73 9f       	mul	r23, r19
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	83 9f       	mul	r24, r19
 5d8:	a0 0d       	add	r26, r0
 5da:	61 1d       	adc	r22, r1
 5dc:	22 1f       	adc	r18, r18
 5de:	74 9f       	mul	r23, r20
 5e0:	33 27       	eor	r19, r19
 5e2:	a0 0d       	add	r26, r0
 5e4:	61 1d       	adc	r22, r1
 5e6:	23 1f       	adc	r18, r19
 5e8:	84 9f       	mul	r24, r20
 5ea:	60 0d       	add	r22, r0
 5ec:	21 1d       	adc	r18, r1
 5ee:	82 2f       	mov	r24, r18
 5f0:	76 2f       	mov	r23, r22
 5f2:	6a 2f       	mov	r22, r26
 5f4:	11 24       	eor	r1, r1
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	8a f0       	brmi	.+34     	; 0x61e <__mulsf3_pse+0x84>
 5fc:	e1 f0       	breq	.+56     	; 0x636 <__mulsf3_pse+0x9c>
 5fe:	88 23       	and	r24, r24
 600:	4a f0       	brmi	.+18     	; 0x614 <__mulsf3_pse+0x7a>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <__mulsf3_pse+0x64>
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	51 05       	cpc	r21, r1
 618:	70 f0       	brcs	.+28     	; 0x636 <__mulsf3_pse+0x9c>
 61a:	14 c0       	rjmp	.+40     	; 0x644 <__fp_inf>
 61c:	aa cf       	rjmp	.-172    	; 0x572 <__fp_szero>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	ec f3       	brlt	.-6      	; 0x61c <__mulsf3_pse+0x82>
 622:	98 3e       	cpi	r25, 0xE8	; 232
 624:	dc f3       	brlt	.-10     	; 0x61c <__mulsf3_pse+0x82>
 626:	86 95       	lsr	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b7 95       	ror	r27
 62e:	f7 95       	ror	r31
 630:	e7 95       	ror	r30
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	c1 f7       	brne	.-16     	; 0x626 <__mulsf3_pse+0x8c>
 636:	fe 2b       	or	r31, r30
 638:	88 0f       	add	r24, r24
 63a:	91 1d       	adc	r25, r1
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__fp_inf>:
 644:	97 f9       	bld	r25, 7
 646:	9f 67       	ori	r25, 0x7F	; 127
 648:	80 e8       	ldi	r24, 0x80	; 128
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	08 95       	ret

00000650 <__fp_nan>:
 650:	9f ef       	ldi	r25, 0xFF	; 255
 652:	80 ec       	ldi	r24, 0xC0	; 192
 654:	08 95       	ret

00000656 <__fp_pscA>:
 656:	00 24       	eor	r0, r0
 658:	0a 94       	dec	r0
 65a:	16 16       	cp	r1, r22
 65c:	17 06       	cpc	r1, r23
 65e:	18 06       	cpc	r1, r24
 660:	09 06       	cpc	r0, r25
 662:	08 95       	ret

00000664 <__fp_pscB>:
 664:	00 24       	eor	r0, r0
 666:	0a 94       	dec	r0
 668:	12 16       	cp	r1, r18
 66a:	13 06       	cpc	r1, r19
 66c:	14 06       	cpc	r1, r20
 66e:	05 06       	cpc	r0, r21
 670:	08 95       	ret

00000672 <__fp_round>:
 672:	09 2e       	mov	r0, r25
 674:	03 94       	inc	r0
 676:	00 0c       	add	r0, r0
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0xc>
 67a:	88 23       	and	r24, r24
 67c:	52 f0       	brmi	.+20     	; 0x692 <__fp_round+0x20>
 67e:	bb 0f       	add	r27, r27
 680:	40 f4       	brcc	.+16     	; 0x692 <__fp_round+0x20>
 682:	bf 2b       	or	r27, r31
 684:	11 f4       	brne	.+4      	; 0x68a <__fp_round+0x18>
 686:	60 ff       	sbrs	r22, 0
 688:	04 c0       	rjmp	.+8      	; 0x692 <__fp_round+0x20>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__umulhisi3>:
 694:	a2 9f       	mul	r26, r18
 696:	b0 01       	movw	r22, r0
 698:	b3 9f       	mul	r27, r19
 69a:	c0 01       	movw	r24, r0
 69c:	a3 9f       	mul	r26, r19
 69e:	01 d0       	rcall	.+2      	; 0x6a2 <__umulhisi3+0xe>
 6a0:	b2 9f       	mul	r27, r18
 6a2:	70 0d       	add	r23, r0
 6a4:	81 1d       	adc	r24, r1
 6a6:	11 24       	eor	r1, r1
 6a8:	91 1d       	adc	r25, r1
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
