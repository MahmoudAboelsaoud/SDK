
WaveGeneration_Square_NM_CTC_modes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000110  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001a4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000dd  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000095  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000064  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000124  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000096  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 75 00 	call	0xea	; 0xea <main>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_10>:
 * Created: 4/28/2019 9:20:44 PM
 *  Author: M.Aboelsaoud
 */ 
#include <avr/interrupt.h>
ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	00 d0       	rcall	.+0      	; 0x94 <__vector_10+0x18>
  94:	00 d0       	rcall	.+0      	; 0x96 <__vector_10+0x1a>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  const unsigned char wavetable[]={24,49,39,34};
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	81 e3       	ldi	r24, 0x31	; 49
  a0:	8a 83       	std	Y+2, r24	; 0x02
  a2:	87 e2       	ldi	r24, 0x27	; 39
  a4:	8b 83       	std	Y+3, r24	; 0x03
  a6:	82 e2       	ldi	r24, 0x22	; 34
  a8:	8c 83       	std	Y+4, r24	; 0x04
  static unsigned char index =0;
OCR0=wavetable[index];
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	fe 01       	movw	r30, r28
  b0:	e8 0f       	add	r30, r24
  b2:	f1 1d       	adc	r31, r1
  b4:	91 81       	ldd	r25, Z+1	; 0x01
  b6:	9c bf       	out	0x3c, r25	; 60
index++;
  b8:	98 2f       	mov	r25, r24
  ba:	9f 5f       	subi	r25, 0xFF	; 255

if (index>=4)
  bc:	94 30       	cpi	r25, 0x04	; 4
  be:	18 f4       	brcc	.+6      	; 0xc6 <__vector_10+0x4a>
ISR(TIMER0_COMP_vect)
{
  const unsigned char wavetable[]={24,49,39,34};
  static unsigned char index =0;
OCR0=wavetable[index];
index++;
  c0:	90 93 60 00 	sts	0x0060, r25
  c4:	03 c0       	rjmp	.+6      	; 0xcc <__vector_10+0x50>

if (index>=4)
index++;
  c6:	8e 5f       	subi	r24, 0xFE	; 254
  c8:	80 93 60 00 	sts	0x0060, r24

}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <main>:
	PORTA=t;
	PORTB=t>>8;
	PORTB= ICR1L-t;
	TIFR=(1<<ICF1);
	*/
	DDRA=0xff;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
  ee:	87 bb       	out	0x17, r24	; 23
	PORTD=0xff;
  f0:	82 bb       	out	0x12, r24	; 18
	while(1){
		TCCR1A=0;
		TCCR1B=0x41;
  f2:	21 e4       	ldi	r18, 0x41	; 65
	
		while((TIFR&(1<<ICF1))==0);
		TIFR=(1<<ICF1);
  f4:	90 e2       	ldi	r25, 0x20	; 32
	*/
	DDRA=0xff;
	DDRB=0xff;
	PORTD=0xff;
	while(1){
		TCCR1A=0;
  f6:	1f bc       	out	0x2f, r1	; 47
		TCCR1B=0x41;
  f8:	2e bd       	out	0x2e, r18	; 46
	
		while((TIFR&(1<<ICF1))==0);
  fa:	08 b6       	in	r0, 0x38	; 56
  fc:	05 fe       	sbrs	r0, 5
  fe:	fd cf       	rjmp	.-6      	; 0xfa <main+0x10>
		TIFR=(1<<ICF1);
 100:	98 bf       	out	0x38, r25	; 56
		PORTA=ICR1L;
 102:	86 b5       	in	r24, 0x26	; 38
 104:	8b bb       	out	0x1b, r24	; 27
		PORTB=ICR1H;
 106:	87 b5       	in	r24, 0x27	; 39
 108:	88 bb       	out	0x18, r24	; 24
		
		
		
		
	}
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <main+0xc>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
