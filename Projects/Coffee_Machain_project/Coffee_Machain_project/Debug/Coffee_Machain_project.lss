
Coffee_Machain_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ae  008000ae  00000834  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000218  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b48  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000099a  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ac7  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  00004188  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000840  00000000  00000000  00004678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012ff  00000000  00000000  00004eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  000061b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}



bool_t start_timer(void(*cb)(), type_timer type, uint_8 time, str_obj * obg_adrs)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_1>

	bool_t ret_val=E_TRUE;
	if((cb!= NULL) && (type < 2) && (obg_adrs != NULL) && (time>0) && (init_flag!=0))
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_2>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	{
		if(used_timers < NO_AVAILABLE_TIMERS)
  2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		{
		  for(uint_8 i =0; i < NO_AVAILABLE_TIMERS; i++)
		   {
			if(ga_str_t[i]==NULL)
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			obg_adrs->type=type;
			obg_adrs->curent_time=time;
			used_timers++;
			break;
			}
			else if(ga_str_t[i] ==obg_adrs)
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	{
		if(used_timers < NO_AVAILABLE_TIMERS)
		{
		  for(uint_8 i =0; i < NO_AVAILABLE_TIMERS; i++)
		   {
			if(ga_str_t[i]==NULL)
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
				break;
		    }

			else
			{
				ret_val=E_FALSE;
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
	{
		if(used_timers < NO_AVAILABLE_TIMERS)
		{
		  for(uint_8 i =0; i < NO_AVAILABLE_TIMERS; i++)
		   {
			if(ga_str_t[i]==NULL)
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
			{
			ga_str_t[i]=obg_adrs;
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
			obg_adrs->cb=cb;
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
			obg_adrs->time=time;
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
			obg_adrs->type=type;
  76:	20 e0       	ldi	r18, 0x00	; 0
			obg_adrs->curent_time=time;
  78:	ae ea       	ldi	r26, 0xAE	; 174
			used_timers++;
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
			break;
  80:	aa 3b       	cpi	r26, 0xBA	; 186
			}
			else if(ga_str_t[i] ==obg_adrs)
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
	bool_t ret_val=E_TRUE;
	if((cb!= NULL) && (type < 2) && (obg_adrs != NULL) && (time>0) && (init_flag!=0))
	{
		if(used_timers < NO_AVAILABLE_TIMERS)
		{
		  for(uint_8 i =0; i < NO_AVAILABLE_TIMERS; i++)
  8a:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
				break;
		    }

			else
			{
				ret_val=E_FALSE;
  92:	0e 94 39 03 	call	0x672	; 0x672 <Init_all_drivers>
			ret_val=E_FALSE;
		}
	}
	else
	{
		ret_val=E_FALSE;
  96:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Start_machine_working>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x8>

0000009c <__vector_1>:
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
		   }

	    }
		else
		{
			ret_val=E_FALSE;
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
			obg_adrs->type=type;
			obg_adrs->curent_time=time;
			used_timers++;
			break;
			}
			else if(ga_str_t[i] ==obg_adrs)
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
				break;
		    }

			else
			{
				ret_val=E_FALSE;
  b0:	7f 93       	push	r23
	{
		ret_val=E_FALSE;
	}

	return ret_val;
}
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
#ifdef INT2
	 else if((str_config ->interrupt_number == INT_2) && (str_config->cb_fun_ptr !=NULL))
	  	 {
		 cb_int2 = (void(*)(void))(str_config->cb_fun_ptr);
			 /*set the level configuration */
			 if(str_config->interrupt_level==RISING_EDAGE)
  be:	e0 91 ae 00 	lds	r30, 0x00AE
				 /*RISING_EDAGE*/
		     	  MCUCSR |=(1<<6);
  c2:	f0 91 af 00 	lds	r31, 0x00AF
			if(str_config->interrupt_level==FALLING_EDAGE)
  c6:	09 95       	icall
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
				 /*FALLING_EDAGE*/
	    	  MCUCSR &=~(1<<6);
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25

				   /*enable INT2*/
				 CLEAR_PIN(DIR_PORTB,2);
  d2:	8f 91       	pop	r24
				 GICR = (1<<5);
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22


bool_t hal_ex_interrupt_Initi(gstr_ext_interrupt_config *str_config)
{

 bool_t ret_val =E_TRUE ;
  d8:	5f 91       	pop	r21
				 /*FALLING_EDAGE*/
	    	  MCUCSR &=~(1<<6);

				   /*enable INT2*/
				 CLEAR_PIN(DIR_PORTB,2);
				 GICR = (1<<5);
  da:	4f 91       	pop	r20
	 }

 }
 else
 {
	 ret_val = E_FALSE;
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
				// SREG = (1<<7);
	  	 }
#endif
	 else
	 {
		 ret_val = E_FALSE;
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_2>:
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
 }
 
 // SREG = (1<<7);
	
return ret_val;
}
  ee:	0f b6       	in	r0, 0x3f	; 63
	/*callback function from INT0 */
	 (*cb_int0)();
}

ISR(INT1_vect)
{
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	/*callback function from INT1 */
	 (*cb_int1)();
 10c:	e0 91 b0 00 	lds	r30, 0x00B0
 110:	f0 91 b1 00 	lds	r31, 0x00B1
 114:	09 95       	icall
}
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	7f 91       	pop	r23
 124:	6f 91       	pop	r22
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_3>:

#ifdef INT2
ISR(INT2_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	/*callback function from INT2*/
	 (*cb_int2)();
 15a:	e0 91 b2 00 	lds	r30, 0x00B2
 15e:	f0 91 b3 00 	lds	r31, 0x00B3
 162:	09 95       	icall
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <GPIO_PortDirection>:
*/
bool_t GPIO_PortDirection(enum_port_t port, uint_8 pins, uint_8 port_dir)
{
	bool_t ret_val = E_FALSE;
	
   if(((port==PORTD)||(port ==PORTB)||(port ==PORTC)||(port ==PORTA)) && ((port_dir==INPUT)||((port_dir==OUTPUT))))
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	31 f0       	breq	.+12     	; 0x196 <GPIO_PortDirection+0x10>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	21 f0       	breq	.+8      	; 0x196 <GPIO_PortDirection+0x10>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	11 f0       	breq	.+4      	; 0x196 <GPIO_PortDirection+0x10>
 192:	81 11       	cpse	r24, r1
 194:	7c c0       	rjmp	.+248    	; 0x28e <GPIO_PortDirection+0x108>
 196:	42 30       	cpi	r20, 0x02	; 2
 198:	08 f0       	brcs	.+2      	; 0x19c <GPIO_PortDirection+0x16>
 19a:	79 c0       	rjmp	.+242    	; 0x28e <GPIO_PortDirection+0x108>
	{
		if (port_dir==INPUT)
 19c:	41 11       	cpse	r20, r1
 19e:	3e c0       	rjmp	.+124    	; 0x21c <GPIO_PortDirection+0x96>
		{
			if(port==PORTA)
 1a0:	81 11       	cpse	r24, r1
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <GPIO_PortDirection+0x3a>
			{
				DDRA &=~(1<<pins);
 1a4:	2a b3       	in	r18, 0x1a	; 26
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <GPIO_PortDirection+0x2c>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <GPIO_PortDirection+0x28>
 1b6:	ba 01       	movw	r22, r20
 1b8:	60 95       	com	r22
 1ba:	62 23       	and	r22, r18
 1bc:	6a bb       	out	0x1a, r22	; 26
 1be:	67 c0       	rjmp	.+206    	; 0x28e <GPIO_PortDirection+0x108>
			}
			else if(port==PORTB)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	71 f4       	brne	.+28     	; 0x1e0 <GPIO_PortDirection+0x5a>
			{
				DDRB &=~(1<<pins);
 1c4:	27 b3       	in	r18, 0x17	; 23
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ac 01       	movw	r20, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GPIO_PortDirection+0x4c>
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GPIO_PortDirection+0x48>
 1d6:	ba 01       	movw	r22, r20
 1d8:	60 95       	com	r22
 1da:	62 23       	and	r22, r18
 1dc:	67 bb       	out	0x17, r22	; 23
 1de:	57 c0       	rjmp	.+174    	; 0x28e <GPIO_PortDirection+0x108>
			}
			else if(port==PORTC)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	71 f4       	brne	.+28     	; 0x200 <GPIO_PortDirection+0x7a>
			{
				DDRC &=~(1<<pins);
 1e4:	24 b3       	in	r18, 0x14	; 20
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	ac 01       	movw	r20, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <GPIO_PortDirection+0x6c>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <GPIO_PortDirection+0x68>
 1f6:	ba 01       	movw	r22, r20
 1f8:	60 95       	com	r22
 1fa:	62 23       	and	r22, r18
 1fc:	64 bb       	out	0x14, r22	; 20
 1fe:	47 c0       	rjmp	.+142    	; 0x28e <GPIO_PortDirection+0x108>
			}
			else 
			{
				DDRD &=~(1<<pins);
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_PortDirection+0x88>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_PortDirection+0x84>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	39 c0       	rjmp	.+114    	; 0x28e <GPIO_PortDirection+0x108>
			}
		}
		else if(port_dir==OUTPUT)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	b9 f5       	brne	.+110    	; 0x28e <GPIO_PortDirection+0x108>
		{
			if(port==PORTB)
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	61 f4       	brne	.+24     	; 0x23c <GPIO_PortDirection+0xb6>
			{
				DDRB|=(1<<pins);
 224:	47 b3       	in	r20, 0x17	; 23
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	c9 01       	movw	r24, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_PortDirection+0xac>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_PortDirection+0xa8>
 236:	84 2b       	or	r24, r20
 238:	87 bb       	out	0x17, r24	; 23
 23a:	29 c0       	rjmp	.+82     	; 0x28e <GPIO_PortDirection+0x108>
			}
		    else if(port==PORTA)
 23c:	81 11       	cpse	r24, r1
 23e:	0d c0       	rjmp	.+26     	; 0x25a <GPIO_PortDirection+0xd4>
			{
				DDRA|=(1<<pins);
 240:	2a b3       	in	r18, 0x1a	; 26
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	ac 01       	movw	r20, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <GPIO_PortDirection+0xc8>
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <GPIO_PortDirection+0xc4>
 252:	ba 01       	movw	r22, r20
 254:	62 2b       	or	r22, r18
 256:	6a bb       	out	0x1a, r22	; 26
 258:	1a c0       	rjmp	.+52     	; 0x28e <GPIO_PortDirection+0x108>
			}
		    else if(port==PORTC)
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	61 f4       	brne	.+24     	; 0x276 <GPIO_PortDirection+0xf0>
			{
				DDRC|=(1<<pins);
 25e:	44 b3       	in	r20, 0x14	; 20
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	c9 01       	movw	r24, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <GPIO_PortDirection+0xe6>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <GPIO_PortDirection+0xe2>
 270:	84 2b       	or	r24, r20
 272:	84 bb       	out	0x14, r24	; 20
 274:	0c c0       	rjmp	.+24     	; 0x28e <GPIO_PortDirection+0x108>
			}
			else			{
				DDRD|=(1<<pins);
 276:	21 b3       	in	r18, 0x11	; 17
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <GPIO_PortDirection+0xfe>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <GPIO_PortDirection+0xfa>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	61 bb       	out	0x11, r22	; 17
	else
	{
		ret_val=E_FALSE;
	}
	return ret_val;
}
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <GPIO_Pin_Set>:

bool_t GPIO_Pin_Set(enum_port_t port, uint_8 pins)
{
	bool_t ret_val = E_FALSE;
	if(((port==PORTD)||(port ==PORTB)||(port ==PORTC)||(port ==PORTA)) && ((pins>=0)||((pins<=7))))
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	71 f1       	breq	.+92     	; 0x2f2 <GPIO_Pin_Set+0x60>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f0       	breq	.+10     	; 0x2a4 <GPIO_Pin_Set+0x12>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	e9 f0       	breq	.+58     	; 0x2d8 <GPIO_Pin_Set+0x46>
 29e:	88 23       	and	r24, r24
 2a0:	71 f0       	breq	.+28     	; 0x2be <GPIO_Pin_Set+0x2c>
 2a2:	33 c0       	rjmp	.+102    	; 0x30a <GPIO_Pin_Set+0x78>
	{
		if(port==PORTB)
		{
			PORTB1|=(1<<pins);
 2a4:	28 b3       	in	r18, 0x18	; 24
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	ac 01       	movw	r20, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_Pin_Set+0x20>
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_Pin_Set+0x1c>
 2b6:	ba 01       	movw	r22, r20
 2b8:	62 2b       	or	r22, r18
 2ba:	68 bb       	out	0x18, r22	; 24
 2bc:	26 c0       	rjmp	.+76     	; 0x30a <GPIO_Pin_Set+0x78>
		}
		else if(port==PORTA)
		{
			PORTA1|=(1<<pins);
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <GPIO_Pin_Set+0x3a>
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <GPIO_Pin_Set+0x36>
 2d0:	ba 01       	movw	r22, r20
 2d2:	62 2b       	or	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <GPIO_Pin_Set+0x78>
		}
		else if(port==PORTC)
		{
			PORTC1|=(1<<pins);
 2d8:	25 b3       	in	r18, 0x15	; 21
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ac 01       	movw	r20, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_Pin_Set+0x54>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_Pin_Set+0x50>
 2ea:	ba 01       	movw	r22, r20
 2ec:	62 2b       	or	r22, r18
 2ee:	65 bb       	out	0x15, r22	; 21
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <GPIO_Pin_Set+0x78>
		}
		else			{
			PORTD1|=(1<<pins);
 2f2:	22 b3       	in	r18, 0x12	; 18
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ac 01       	movw	r20, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_Pin_Set+0x6e>
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_Pin_Set+0x6a>
 304:	ba 01       	movw	r22, r20
 306:	62 2b       	or	r22, r18
 308:	62 bb       	out	0x12, r22	; 18
	else
	{
		ret_val=E_FALSE;
	}
	return ret_val;
}
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret

0000030e <GPIO_Pin_Clear>:


bool_t GPIO_Pin_Clear(enum_port_t port, uint_8 pins)
{
	bool_t ret_val = E_FALSE;
	if(((port==PORTD)||(port ==PORTB)||(port ==PORTC)||(port ==PORTA)) && ((pins>=0)||((pins<=7))))
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	89 f1       	breq	.+98     	; 0x374 <GPIO_Pin_Clear+0x66>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	29 f0       	breq	.+10     	; 0x320 <GPIO_Pin_Clear+0x12>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	f9 f0       	breq	.+62     	; 0x358 <GPIO_Pin_Clear+0x4a>
 31a:	88 23       	and	r24, r24
 31c:	79 f0       	breq	.+30     	; 0x33c <GPIO_Pin_Clear+0x2e>
 31e:	37 c0       	rjmp	.+110    	; 0x38e <GPIO_Pin_Clear+0x80>
	{
		if(port==PORTB)
		{
			PORTB1&=~(1<<pins);
 320:	28 b3       	in	r18, 0x18	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ac 01       	movw	r20, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <GPIO_Pin_Clear+0x20>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <GPIO_Pin_Clear+0x1c>
 332:	ba 01       	movw	r22, r20
 334:	60 95       	com	r22
 336:	62 23       	and	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
 33a:	29 c0       	rjmp	.+82     	; 0x38e <GPIO_Pin_Clear+0x80>
		}
		else if(port==PORTA)
		{
			PORTA1&=~(1<<pins);
 33c:	2b b3       	in	r18, 0x1b	; 27
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <GPIO_Pin_Clear+0x3c>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <GPIO_Pin_Clear+0x38>
 34e:	ba 01       	movw	r22, r20
 350:	60 95       	com	r22
 352:	62 23       	and	r22, r18
 354:	6b bb       	out	0x1b, r22	; 27
 356:	1b c0       	rjmp	.+54     	; 0x38e <GPIO_Pin_Clear+0x80>
		}
		else if(port==PORTC)
		{
			PORTC1&=~(1<<pins);
 358:	25 b3       	in	r18, 0x15	; 21
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	ac 01       	movw	r20, r24
 360:	02 c0       	rjmp	.+4      	; 0x366 <GPIO_Pin_Clear+0x58>
 362:	44 0f       	add	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <GPIO_Pin_Clear+0x54>
 36a:	ba 01       	movw	r22, r20
 36c:	60 95       	com	r22
 36e:	62 23       	and	r22, r18
 370:	65 bb       	out	0x15, r22	; 21
 372:	0d c0       	rjmp	.+26     	; 0x38e <GPIO_Pin_Clear+0x80>
		}
		else			{
			PORTD1&=~(1<<pins);
 374:	22 b3       	in	r18, 0x12	; 18
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <GPIO_Pin_Clear+0x74>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <GPIO_Pin_Clear+0x70>
 386:	ba 01       	movw	r22, r20
 388:	60 95       	com	r22
 38a:	62 23       	and	r22, r18
 38c:	62 bb       	out	0x12, r22	; 18
	else
	{
		ret_val=E_FALSE;
	}
	return ret_val;
}
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret

00000392 <GPIO_GET_PIN>:
	return ret_val;
}

uint_8 GPIO_GET_PIN(enum_port_t port, uint_8 pins)
{
	uint_8 ret_val  = (port >>pins )&1;
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <GPIO_GET_PIN+0x8>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <GPIO_GET_PIN+0x4>
	return ret_val;
}
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	08 95       	ret

000003a2 <__vector_16>:

#include"hal_adc.h"

static void (*cb_adc)();
ISR(ADC_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	DDRC =0xff;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	84 bb       	out	0x14, r24	; 20
	PORTC^=0xff;
 3c8:	85 b3       	in	r24, 0x15	; 21
 3ca:	80 95       	com	r24
 3cc:	85 bb       	out	0x15, r24	; 21
	(*cb_adc)();
 3ce:	e0 91 b4 00 	lds	r30, 0x00B4
 3d2:	f0 91 b5 00 	lds	r31, 0x00B5
 3d6:	09 95       	icall
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_11>:


#include <avr/interrupt.h>
static void(*cb_fun_ovf_t)();
ISR(TIMER0_OVF_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
  (*cb_fun_ovf_t)();
 41c:	e0 91 b6 00 	lds	r30, 0x00B6
 420:	f0 91 b7 00 	lds	r31, 0x00B7
 424:	09 95       	icall
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3) 

uint_8 KeyPad_4x3_adjustKeyNumber(uint_8 button_number)
{
	switch(button_number)
 448:	8a 30       	cpi	r24, 0x0A	; 10
 44a:	31 f0       	breq	.+12     	; 0x458 <KeyPad_4x3_adjustKeyNumber+0x10>
 44c:	50 f0       	brcs	.+20     	; 0x462 <KeyPad_4x3_adjustKeyNumber+0x1a>
 44e:	8b 30       	cpi	r24, 0x0B	; 11
 450:	39 f0       	breq	.+14     	; 0x460 <KeyPad_4x3_adjustKeyNumber+0x18>
 452:	8c 30       	cpi	r24, 0x0C	; 12
 454:	31 f4       	brne	.+12     	; 0x462 <KeyPad_4x3_adjustKeyNumber+0x1a>
 456:	02 c0       	rjmp	.+4      	; 0x45c <KeyPad_4x3_adjustKeyNumber+0x14>
	{
		case 10: return '*'; // ASCII Code of =
 458:	8a e2       	ldi	r24, 0x2A	; 42
 45a:	08 95       	ret
				 break;
		case 11: return 0;
				 break;		
		case 12: return '#'; // ASCII Code of +
 45c:	83 e2       	ldi	r24, 0x23	; 35
 45e:	08 95       	ret
{
	switch(button_number)
	{
		case 10: return '*'; // ASCII Code of =
				 break;
		case 11: return 0;
 460:	80 e0       	ldi	r24, 0x00	; 0
				 break;		
		case 12: return '#'; // ASCII Code of +
				 break;
		default: return button_number;								 						
	}
} 
 462:	08 95       	ret

00000464 <KeyPad_getPressedKey>:

uint_8 KeyPad_getPressedKey(void){
	uint_8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 464:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
 466:	60 e1       	ldi	r22, 0x10	; 16
 468:	70 e0       	ldi	r23, 0x00	; 0
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	f0 e0       	ldi	r31, 0x00	; 0

uint_8 KeyPad_getPressedKey(void){
	uint_8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 46e:	a0 e0       	ldi	r26, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
 470:	9b 01       	movw	r18, r22
 472:	08 2e       	mov	r0, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <KeyPad_getPressedKey+0x16>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <KeyPad_getPressedKey+0x12>
 47e:	27 bb       	out	0x17, r18	; 23
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
 480:	20 95       	com	r18
 482:	28 bb       	out	0x18, r18	; 24
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
 484:	b0 9b       	sbis	0x16, 0	; 22
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <KeyPad_getPressedKey+0x3e>
 488:	9f 01       	movw	r18, r30
 48a:	92 2f       	mov	r25, r18
 48c:	46 b3       	in	r20, 0x16	; 22
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <KeyPad_getPressedKey+0x34>
 494:	55 95       	asr	r21
 496:	47 95       	ror	r20
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <KeyPad_getPressedKey+0x30>
 49c:	40 fd       	sbrc	r20, 0
 49e:	0a c0       	rjmp	.+20     	; 0x4b4 <KeyPad_getPressedKey+0x50>
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <KeyPad_getPressedKey+0x40>
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
 4a2:	90 e0       	ldi	r25, 0x00	; 0
			{
				if(IS_BIT_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	29 2f       	mov	r18, r25
 4a8:	22 0f       	add	r18, r18
 4aa:	92 0f       	add	r25, r18
 4ac:	89 0f       	add	r24, r25
 4ae:	0e 94 24 02 	call	0x448	; 0x448 <KeyPad_4x3_adjustKeyNumber>
 4b2:	08 95       	ret
 4b4:	2f 5f       	subi	r18, 0xFF	; 255
 4b6:	3f 4f       	sbci	r19, 0xFF	; 255
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
 4b8:	24 30       	cpi	r18, 0x04	; 4
 4ba:	31 05       	cpc	r19, r1
 4bc:	31 f7       	brne	.-52     	; 0x48a <KeyPad_getPressedKey+0x26>

uint_8 KeyPad_getPressedKey(void){
	uint_8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 4be:	8f 5f       	subi	r24, 0xFF	; 255
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	b0 f2       	brcs	.-84     	; 0x470 <KeyPad_getPressedKey+0xc>
 4c4:	8a 2f       	mov	r24, r26
 4c6:	d4 cf       	rjmp	.-88     	; 0x470 <KeyPad_getPressedKey+0xc>

000004c8 <Lcd_Send_Command>:

bool_t Lcd_Send_Command(uint_8 comm)
{
	bool_t ret_val=E_TRUE;
	/* Clear RS, RW */
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RS);
 4c8:	90 98       	cbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 4ca:	91 98       	cbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4cc:	ef ec       	ldi	r30, 0xCF	; 207
 4ce:	f7 e0       	ldi	r31, 0x07	; 7
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <Lcd_Send_Command+0x8>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Lcd_Send_Command+0xe>
 4d6:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 4d8:	92 98       	cbi	0x12, 2	; 18
 4da:	ef ec       	ldi	r30, 0xCF	; 207
 4dc:	f7 e0       	ldi	r31, 0x07	; 7
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <Lcd_Send_Command+0x16>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <Lcd_Send_Command+0x1c>
 4e4:	00 00       	nop
	_delay_ms(1);

#if(DATA_BITS_MODE==4)
	/* out the upper 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT_PORT= (comm & 0xf0);
 4e6:	98 2f       	mov	r25, r24
 4e8:	90 7f       	andi	r25, 0xF0	; 240
 4ea:	95 bb       	out	0x15, r25	; 21
 4ec:	ef ec       	ldi	r30, 0xCF	; 207
 4ee:	f7 e0       	ldi	r31, 0x07	; 7
 4f0:	31 97       	sbiw	r30, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <Lcd_Send_Command+0x28>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <Lcd_Send_Command+0x2e>
 4f6:	00 00       	nop
		LCD_DATA_PORT_PORT= ((comm >>4)& 0xf0);
	#endif

		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 4f8:	92 9a       	sbi	0x12, 2	; 18
 4fa:	ef ec       	ldi	r30, 0xCF	; 207
 4fc:	f7 e0       	ldi	r31, 0x07	; 7
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <Lcd_Send_Command+0x36>
 502:	00 c0       	rjmp	.+0      	; 0x504 <Lcd_Send_Command+0x3c>
 504:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 506:	92 98       	cbi	0x12, 2	; 18
 508:	ef ec       	ldi	r30, 0xCF	; 207
 50a:	f7 e0       	ldi	r31, 0x07	; 7
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <Lcd_Send_Command+0x44>
 510:	00 c0       	rjmp	.+0      	; 0x512 <Lcd_Send_Command+0x4a>
 512:	00 00       	nop
		_delay_ms(1);
    #ifdef UPPER_PORT_PINS
		LCD_DATA_PORT_PORT= ((comm<<4)&0xf0);
 514:	f0 e1       	ldi	r31, 0x10	; 16
 516:	8f 9f       	mul	r24, r31
 518:	c0 01       	movw	r24, r0
 51a:	11 24       	eor	r1, r1
 51c:	85 bb       	out	0x15, r24	; 21
 51e:	8f ec       	ldi	r24, 0xCF	; 207
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <Lcd_Send_Command+0x5a>
 526:	00 c0       	rjmp	.+0      	; 0x528 <Lcd_Send_Command+0x60>
 528:	00 00       	nop
		LCD_DATA_PORT_PORT= (comm &0x0f);
	#endif

		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 52a:	92 9a       	sbi	0x12, 2	; 18
 52c:	ef ec       	ldi	r30, 0xCF	; 207
 52e:	f7 e0       	ldi	r31, 0x07	; 7
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <Lcd_Send_Command+0x68>
 534:	00 c0       	rjmp	.+0      	; 0x536 <Lcd_Send_Command+0x6e>
 536:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 538:	92 98       	cbi	0x12, 2	; 18
 53a:	8f ec       	ldi	r24, 0xCF	; 207
 53c:	97 e0       	ldi	r25, 0x07	; 7
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <Lcd_Send_Command+0x76>
 542:	00 c0       	rjmp	.+0      	; 0x544 <Lcd_Send_Command+0x7c>
 544:	00 00       	nop

#endif


	return ret_val;
}
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	08 95       	ret

0000054a <Lcd_Init>:
bool_t Lcd_Init()
{
	bool_t ret_val=E_TRUE;

	/* set lcd data port and RS E Rw as output  */
	LCD_CNTR_PORT_DIR |=(1<<RS)|(1<<RW)|(1<<E);
 54a:	81 b3       	in	r24, 0x11	; 17
 54c:	87 60       	ori	r24, 0x07	; 7
 54e:	81 bb       	out	0x11, r24	; 17
	#if(DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
	       LCD_DATA_PORT_DIR=0xf0; /* Configure the highest 4 bits of the data port as output pins */
 550:	80 ef       	ldi	r24, 0xF0	; 240
 552:	84 bb       	out	0x14, r24	; 20
 	 	#else
	       LCD_DATA_PORT_DIR=0x0f; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
	       Lcd_Send_Command(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>
	       Lcd_Send_Command(TWO_LINE_LCD_Four_BIT_MODE);
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>
    #elif(DATA_BITS_MODE == 8)
	       LCD_DATA_PORT_DIR=0xff; /* initialize LCD in 8-bit mode */
	       Lcd_Send_Command(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif
	Lcd_Send_Command(CURSOR_OFF);
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>
	Lcd_Send_Command(CLEAR_COMMAND);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>

	return ret_val;
}
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret

00000570 <Lcd_Display_Character>:

bool_t Lcd_Display_Character(uint_8 ch)
{
	bool_t ret_val= E_TRUE;
	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
 570:	90 9a       	sbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 572:	91 98       	cbi	0x12, 1	; 18
 574:	ef ec       	ldi	r30, 0xCF	; 207
 576:	f7 e0       	ldi	r31, 0x07	; 7
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <Lcd_Display_Character+0x8>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <Lcd_Display_Character+0xe>
 57e:	00 00       	nop
	_delay_ms(1);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 580:	92 98       	cbi	0x12, 2	; 18
 582:	ef ec       	ldi	r30, 0xCF	; 207
 584:	f7 e0       	ldi	r31, 0x07	; 7
 586:	31 97       	sbiw	r30, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <Lcd_Display_Character+0x16>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <Lcd_Display_Character+0x1c>
 58c:	00 00       	nop
	_delay_ms(1);

#if(DATA_BITS_MODE==4)
	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT_PORT= (ch & 0xf0);
 58e:	98 2f       	mov	r25, r24
 590:	90 7f       	andi	r25, 0xF0	; 240
 592:	95 bb       	out	0x15, r25	; 21
 594:	ef ec       	ldi	r30, 0xCF	; 207
 596:	f7 e0       	ldi	r31, 0x07	; 7
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <Lcd_Display_Character+0x28>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <Lcd_Display_Character+0x2e>
 59e:	00 00       	nop
		LCD_DATA_PORT_PORT= ((ch >>4)& 0xf0);
	#endif

		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 5a0:	92 9a       	sbi	0x12, 2	; 18
 5a2:	ef ec       	ldi	r30, 0xCF	; 207
 5a4:	f7 e0       	ldi	r31, 0x07	; 7
 5a6:	31 97       	sbiw	r30, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <Lcd_Display_Character+0x36>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <Lcd_Display_Character+0x3c>
 5ac:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 5ae:	92 98       	cbi	0x12, 2	; 18
 5b0:	ef ec       	ldi	r30, 0xCF	; 207
 5b2:	f7 e0       	ldi	r31, 0x07	; 7
 5b4:	31 97       	sbiw	r30, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <Lcd_Display_Character+0x44>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <Lcd_Display_Character+0x4a>
 5ba:	00 00       	nop
		_delay_ms(1);
    #ifdef UPPER_PORT_PINS
		LCD_DATA_PORT_PORT= ((ch<<4)&0xf0);
 5bc:	f0 e1       	ldi	r31, 0x10	; 16
 5be:	8f 9f       	mul	r24, r31
 5c0:	c0 01       	movw	r24, r0
 5c2:	11 24       	eor	r1, r1
 5c4:	85 bb       	out	0x15, r24	; 21
 5c6:	8f ec       	ldi	r24, 0xCF	; 207
 5c8:	97 e0       	ldi	r25, 0x07	; 7
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <Lcd_Display_Character+0x5a>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <Lcd_Display_Character+0x60>
 5d0:	00 00       	nop
		LCD_DATA_PORT_PORT= (ch &0x0f);
	#endif

		_delay_ms(1);
		/*SET the enable pulse*/
		SET_BIT(LCD_CNTR_PORT_PORT, E);
 5d2:	92 9a       	sbi	0x12, 2	; 18
 5d4:	ef ec       	ldi	r30, 0xCF	; 207
 5d6:	f7 e0       	ldi	r31, 0x07	; 7
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <Lcd_Display_Character+0x68>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <Lcd_Display_Character+0x6e>
 5de:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CNTR_PORT_PORT, E);
 5e0:	92 98       	cbi	0x12, 2	; 18
 5e2:	8f ec       	ldi	r24, 0xCF	; 207
 5e4:	97 e0       	ldi	r25, 0x07	; 7
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <Lcd_Display_Character+0x76>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <Lcd_Display_Character+0x7c>
 5ec:	00 00       	nop


#endif

	return ret_val;
}
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret

000005f2 <Lcd_Display_String>:


bool_t Lcd_Display_String(const uint_8* str)
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
	bool_t ret_val=E_TRUE;

	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
 5f8:	90 9a       	sbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);
 5fa:	91 98       	cbi	0x12, 1	; 18

	while(*str){
 5fc:	88 81       	ld	r24, Y
 5fe:	88 23       	and	r24, r24
 600:	31 f0       	breq	.+12     	; 0x60e <Lcd_Display_String+0x1c>

	return ret_val;
}


bool_t Lcd_Display_String(const uint_8* str)
 602:	21 96       	adiw	r28, 0x01	; 1
	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);

	while(*str){
		Lcd_Display_Character(*str);
 604:	0e 94 b8 02 	call	0x570	; 0x570 <Lcd_Display_Character>

	/* Clear RS, RW */
	SET_BIT(LCD_CNTR_PORT_PORT, RS);
	CLEAR_BIT(LCD_CNTR_PORT_PORT, RW);

	while(*str){
 608:	89 91       	ld	r24, Y+
 60a:	81 11       	cpse	r24, r1
 60c:	fb cf       	rjmp	.-10     	; 0x604 <Lcd_Display_String+0x12>
	_delay_ms(1);*/
	str++;
	}

	return ret_val;
}
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <LCD_goToRowColumn>:
{
	bool_t ret_val=E_TRUE;

	 static	uint_8 Address;

	switch(row)
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	49 f0       	breq	.+18     	; 0x62c <LCD_goToRowColumn+0x16>
 61a:	28 f0       	brcs	.+10     	; 0x626 <LCD_goToRowColumn+0x10>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	51 f0       	breq	.+20     	; 0x634 <LCD_goToRowColumn+0x1e>
 620:	83 30       	cpi	r24, 0x03	; 3
 622:	79 f4       	brne	.+30     	; 0x642 <LCD_goToRowColumn+0x2c>
 624:	0b c0       	rjmp	.+22     	; 0x63c <LCD_goToRowColumn+0x26>
		{
			case 0:
					Address=col;
 626:	60 93 b8 00 	sts	0x00B8, r22
					break;
 62a:	0b c0       	rjmp	.+22     	; 0x642 <LCD_goToRowColumn+0x2c>
			case 1:
					Address=col+0x40;
 62c:	60 5c       	subi	r22, 0xC0	; 192
 62e:	60 93 b8 00 	sts	0x00B8, r22
					break;
 632:	07 c0       	rjmp	.+14     	; 0x642 <LCD_goToRowColumn+0x2c>
			case 2:
					Address=col+0x10;
 634:	60 5f       	subi	r22, 0xF0	; 240
 636:	60 93 b8 00 	sts	0x00B8, r22
					break;
 63a:	03 c0       	rjmp	.+6      	; 0x642 <LCD_goToRowColumn+0x2c>
			case 3:
					Address=col+0x50;
 63c:	60 5b       	subi	r22, 0xB0	; 176
 63e:	60 93 b8 00 	sts	0x00B8, r22
					break;
		}
	 /* we need to apply the corresponding command 0b10000000+Address */
	Lcd_Send_Command(Address | SET_CURSOR_LOCATION);
 642:	80 91 b8 00 	lds	r24, 0x00B8
 646:	80 68       	ori	r24, 0x80	; 128
 648:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>



	return ret_val;
}
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	08 95       	ret

00000650 <LCD_Display_RowColumn>:

bool_t LCD_Display_RowColumn(uint_8 row, uint_8 col, const uint_8* str)
{
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	ea 01       	movw	r28, r20

	bool_t ret_val=E_TRUE;

	 LCD_goToRowColumn(row, col);
 656:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_goToRowColumn>
	 Lcd_Display_String(str);
 65a:	ce 01       	movw	r24, r28
 65c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Lcd_Display_String>

	return ret_val;
}
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <Lcd_Clean>:

bool_t Lcd_Clean()
{
	bool_t ret_val=E_TRUE;

  Lcd_Send_Command(CLEAR_COMMAND);
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Lcd_Send_Command>

	return ret_val;
}
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret

00000672 <Init_all_drivers>:

bool_t Init_all_drivers()
{
	bool_t ret_val =E_TRUE;
	/************GPIO*****************/
	GPIO_PortDirection(PORTA, PIN0, INPUT);
 672:	8b b3       	in	r24, 0x1b	; 27
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_PortDirection>
	//GPIO_PortDirection(PORTA, PIN1, INPUT);
	while(GPIO_GET_PIN(PINA,PIN0)==1);
 67c:	89 b3       	in	r24, 0x19	; 25
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	0e 94 c9 01 	call	0x392	; 0x392 <GPIO_GET_PIN>
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	d1 f3       	breq	.-12     	; 0x67c <Init_all_drivers+0xa>
	GPIO_PortDirection(PORTA, PIN6, OUTPUT);
 688:	8b b3       	in	r24, 0x1b	; 27
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	66 e0       	ldi	r22, 0x06	; 6
 68e:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_PortDirection>
	GPIO_Pin_Clear(PORTA,PIN6);
 692:	8b b3       	in	r24, 0x1b	; 27
 694:	66 e0       	ldi	r22, 0x06	; 6
 696:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_Pin_Clear>
	
	/************LCD*****************/
	Lcd_Init();
 69a:	0e 94 a5 02 	call	0x54a	; 0x54a <Lcd_Init>
	LCD_Display_RowColumn(0,4,"Welcome");
 69e:	40 e6       	ldi	r20, 0x60	; 96
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	64 e0       	ldi	r22, 0x04	; 4
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
	LCD_Display_RowColumn(1,1,"COFFEE MACHINE");
 6aa:	48 e6       	ldi	r20, 0x68	; 104
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
	Lcd_Clean();
 6b6:	0e 94 34 03 	call	0x668	; 0x668 <Lcd_Clean>
	LCD_Display_RowColumn(0,0,"SELECT: 1-START");
 6ba:	47 e7       	ldi	r20, 0x77	; 119
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
	LCD_Display_RowColumn(1,0,"2-INFO 3-SETTING");
 6c6:	47 e8       	ldi	r20, 0x87	; 135
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
	
	

	return ret_val;
}
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	08 95       	ret

000006d6 <Start_machine_working>:

bool_t Start_machine_working()
{
	bool_t ret_val =E_TRUE;
	g_u8PressedKey = KeyPad_getPressedKey();
 6d6:	0e 94 32 02 	call	0x464	; 0x464 <KeyPad_getPressedKey>
 6da:	80 93 b9 00 	sts	0x00B9, r24
	switch(g_u8PressedKey)
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	69 f0       	breq	.+26     	; 0x6fc <Start_machine_working+0x26>
 6e2:	83 30       	cpi	r24, 0x03	; 3
 6e4:	a1 f0       	breq	.+40     	; 0x70e <Start_machine_working+0x38>
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	d9 f4       	brne	.+54     	; 0x720 <Start_machine_working+0x4a>
	{
		case 1  : {Lcd_Clean(); 
 6ea:	0e 94 34 03 	call	0x668	; 0x668 <Lcd_Clean>
			       LCD_Display_RowColumn(0,0,"START");   break;}
 6ee:	41 e8       	ldi	r20, 0x81	; 129
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
 6fa:	27 c0       	rjmp	.+78     	; 0x74a <Start_machine_working+0x74>
		case 2  : {Lcd_Clean();
 6fc:	0e 94 34 03 	call	0x668	; 0x668 <Lcd_Clean>
		           LCD_Display_RowColumn(0,0,"INFO");    break;}
 700:	48 e9       	ldi	r20, 0x98	; 152
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
 70c:	1e c0       	rjmp	.+60     	; 0x74a <Start_machine_working+0x74>
		case 3  : {Lcd_Clean();
 70e:	0e 94 34 03 	call	0x668	; 0x668 <Lcd_Clean>
		           LCD_Display_RowColumn(0,0,"SETTING"); break;}
 712:	40 e9       	ldi	r20, 0x90	; 144
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
 71e:	15 c0       	rjmp	.+42     	; 0x74a <Start_machine_working+0x74>
		default :{Lcd_Clean();
 720:	0e 94 34 03 	call	0x668	; 0x668 <Lcd_Clean>
				  LCD_Display_RowColumn(0,1,"Wrong Choice^_^");
 724:	4d e9       	ldi	r20, 0x9D	; 157
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Display_RowColumn>
				  GPIO_PortDirection(PORTA, PIN7, OUTPUT); 
 730:	8b b3       	in	r24, 0x1b	; 27
 732:	41 e0       	ldi	r20, 0x01	; 1
 734:	67 e0       	ldi	r22, 0x07	; 7
 736:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_PortDirection>
				  GPIO_Pin_Clear(PORTA,PIN7);
 73a:	8b b3       	in	r24, 0x1b	; 27
 73c:	67 e0       	ldi	r22, 0x07	; 7
 73e:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_Pin_Clear>
				  GPIO_Pin_Set(PORTA,PIN6);             break;} 
 742:	8b b3       	in	r24, 0x1b	; 27
 744:	66 e0       	ldi	r22, 0x06	; 6
 746:	0e 94 49 01 	call	0x292	; 0x292 <GPIO_Pin_Set>
	}
	


	return ret_val;
}
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	08 95       	ret

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
