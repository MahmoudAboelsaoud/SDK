
UART_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  000003b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000863  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028b  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002ed  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b0  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004b2  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002e7  00000000  00000000  0000200a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  000022f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_14>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  8a:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:
static void (*uart_RxCallBack)(void);
static void (*uart_TxCallBack)(void);


ISR(USART_RXC_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	(*uart_RxCallBack)();
  b4:	e0 91 6c 00 	lds	r30, 0x006C
  b8:	f0 91 6d 00 	lds	r31, 0x006D
  bc:	09 95       	icall
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_15>:

ISR(USART_TXC_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	(*uart_TxCallBack)();
 102:	e0 91 6e 00 	lds	r30, 0x006E
 106:	f0 91 6f 00 	lds	r31, 0x006F
 10a:	09 95       	icall
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_14>:


ISR(USART_UDRE_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	(*uart_TxCallBack)();
 150:	e0 91 6e 00 	lds	r30, 0x006E
 154:	f0 91 6f 00 	lds	r31, 0x006F
 158:	09 95       	icall
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <MUART_boolInit>:


bool_t MUART_boolInit(gstr_uart_t *obj)
{
 17c:	fc 01       	movw	r30, r24
	bool_t ret_val = E_TRUE;
	if(obj != NULL)
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	09 f4       	brne	.+2      	; 0x184 <MUART_boolInit+0x8>
 182:	a7 c0       	rjmp	.+334    	; 0x2d2 <MUART_boolInit+0x156>
	{
	/**set the URSEL bit to can writing on UCSRC register SET_BIT(UCSRC,URSEL);***/
			SET_BIT(UCSRC,URSEL);
 184:	80 b5       	in	r24, 0x20	; 32
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 bd       	out	0x20, r24	; 32
			/*******mode selection*******/
		if(obj->usart_mode==ASYENCHRONOUS_USART)
 18a:	87 81       	ldd	r24, Z+7	; 0x07
 18c:	81 11       	cpse	r24, r1
 18e:	03 c0       	rjmp	.+6      	; 0x196 <MUART_boolInit+0x1a>
			CLR_BIT(UCSRC,UMSEL);
 190:	80 b5       	in	r24, 0x20	; 32
 192:	8f 7b       	andi	r24, 0xBF	; 191
 194:	80 bd       	out	0x20, r24	; 32
			/******parity selection*******/
		if(obj->parity==USART_PARITY_OFF)
 196:	80 85       	ldd	r24, Z+8	; 0x08
 198:	81 11       	cpse	r24, r1
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <MUART_boolInit+0x2e>
			{
				CLR_BIT(UCSRC,UPM0);
 19c:	80 b5       	in	r24, 0x20	; 32
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UPM1);
 1a2:	80 b5       	in	r24, 0x20	; 32
 1a4:	8f 7d       	andi	r24, 0xDF	; 223
 1a6:	80 bd       	out	0x20, r24	; 32
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <MUART_boolInit+0x4c>
			}
		else if(obj->parity==USART_PARITY_EVEN)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	39 f4       	brne	.+14     	; 0x1bc <MUART_boolInit+0x40>
			{
				CLR_BIT(UCSRC,UPM0);
 1ae:	80 b5       	in	r24, 0x20	; 32
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
 1b4:	80 b5       	in	r24, 0x20	; 32
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	80 bd       	out	0x20, r24	; 32
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <MUART_boolInit+0x4c>
			}
		else
			{
				SET_BIT(UCSRC,UPM0);
 1bc:	80 b5       	in	r24, 0x20	; 32
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UPM1);
 1c2:	80 b5       	in	r24, 0x20	; 32
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	80 bd       	out	0x20, r24	; 32
			}
	  /***********stop bit number**********/
		if(obj->stop_bit_num==USART_ONE_STOP_BIT)
 1c8:	81 85       	ldd	r24, Z+9	; 0x09
 1ca:	81 11       	cpse	r24, r1
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <MUART_boolInit+0x5a>
				CLR_BIT(UCSRC,USBS);
 1ce:	80 b5       	in	r24, 0x20	; 32
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	80 bd       	out	0x20, r24	; 32
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <MUART_boolInit+0x60>
		else
		     	SET_BIT(UCSRC,USBS);
 1d6:	80 b5       	in	r24, 0x20	; 32
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	80 bd       	out	0x20, r24	; 32
	 /***********data size send**********/
		if(obj->data_size==USART_8_BITS)
 1dc:	82 85       	ldd	r24, Z+10	; 0x0a
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	41 f4       	brne	.+16     	; 0x1f2 <MUART_boolInit+0x76>
			{
				//UCSRC |=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
				SET_BIT(UCSRC,UCSZ0);
 1e2:	80 b5       	in	r24, 0x20	; 32
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ1);
 1e8:	80 b5       	in	r24, 0x20	; 32
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRB,UCSZ2);
 1ee:	52 98       	cbi	0x0a, 2	; 10
 1f0:	2d c0       	rjmp	.+90     	; 0x24c <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_5_BITS)
 1f2:	81 11       	cpse	r24, r1
 1f4:	0a c0       	rjmp	.+20     	; 0x20a <MUART_boolInit+0x8e>
			{
			//UCSRC &=~(1<<UCSZ1)&(1<<UCSZ1)|(1<<URSEL);
			CLR_BIT(UCSRC,UCSZ0);
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	8d 7f       	andi	r24, 0xFD	; 253
 1fa:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ1);
 1fc:	80 b5       	in	r24, 0x20	; 32
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ2);
 202:	80 b5       	in	r24, 0x20	; 32
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	80 bd       	out	0x20, r24	; 32
 208:	21 c0       	rjmp	.+66     	; 0x24c <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_6_BITS)
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	51 f4       	brne	.+20     	; 0x222 <MUART_boolInit+0xa6>
			{
			SET_BIT(UCSRC,UCSZ0);
 20e:	80 b5       	in	r24, 0x20	; 32
 210:	82 60       	ori	r24, 0x02	; 2
 212:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ1);
 214:	80 b5       	in	r24, 0x20	; 32
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ2);
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	8b 7f       	andi	r24, 0xFB	; 251
 21e:	80 bd       	out	0x20, r24	; 32
 220:	15 c0       	rjmp	.+42     	; 0x24c <MUART_boolInit+0xd0>
			}
		else if(obj->data_size==USART_7_BITS)
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	51 f4       	brne	.+20     	; 0x23a <MUART_boolInit+0xbe>
			{
				CLR_BIT(UCSRC,UCSZ0);
 226:	80 b5       	in	r24, 0x20	; 32
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	80 bd       	out	0x20, r24	; 32
				SET_BIT(UCSRC,UCSZ1);
 22c:	80 b5       	in	r24, 0x20	; 32
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	80 bd       	out	0x20, r24	; 32
				CLR_BIT(UCSRC,UCSZ2);
 232:	80 b5       	in	r24, 0x20	; 32
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	80 bd       	out	0x20, r24	; 32
 238:	09 c0       	rjmp	.+18     	; 0x24c <MUART_boolInit+0xd0>
			}
		else 
			{
			SET_BIT(UCSRC,UCSZ0);
 23a:	80 b5       	in	r24, 0x20	; 32
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ1);
 240:	80 b5       	in	r24, 0x20	; 32
 242:	84 60       	ori	r24, 0x04	; 4
 244:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ2);
 246:	80 b5       	in	r24, 0x20	; 32
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	80 bd       	out	0x20, r24	; 32
			}
	/************ clock polarity selection******/
		if(obj->clock_polarity==USART_RISING_EDEG)
 24c:	83 85       	ldd	r24, Z+11	; 0x0b
 24e:	81 11       	cpse	r24, r1
 250:	04 c0       	rjmp	.+8      	; 0x25a <MUART_boolInit+0xde>
			CLR_BIT(UCSRC,UCPOL);
 252:	80 b5       	in	r24, 0x20	; 32
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	80 bd       	out	0x20, r24	; 32
 258:	03 c0       	rjmp	.+6      	; 0x260 <MUART_boolInit+0xe4>
		else
			SET_BIT(UCSRC,UCPOL);
 25a:	80 b5       	in	r24, 0x20	; 32
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 bd       	out	0x20, r24	; 32
	/*********** RX enable*****************/
		if(obj->rx_enable==UART_RX_ON)
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	11 f4       	brne	.+4      	; 0x26a <MUART_boolInit+0xee>
			SET_BIT(UCSRB,RXEN);	
 266:	54 9a       	sbi	0x0a, 4	; 10
 268:	01 c0       	rjmp	.+2      	; 0x26c <MUART_boolInit+0xf0>
		else
			CLR_BIT(UCSRB,RXEN);
 26a:	54 98       	cbi	0x0a, 4	; 10
	/*************** TX enable************/
		if(obj->tx_enable==UART_TX_ON)
 26c:	80 81       	ld	r24, Z
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	11 f4       	brne	.+4      	; 0x276 <MUART_boolInit+0xfa>
			SET_BIT(UCSRB,TXEN);
 272:	53 9a       	sbi	0x0a, 3	; 10
 274:	01 c0       	rjmp	.+2      	; 0x278 <MUART_boolInit+0xfc>
		else
			CLR_BIT(UCSRB,TXEN);
 276:	53 98       	cbi	0x0a, 3	; 10
	/*********TX interrupt enable*******/	
		if(obj->tx_interrupt_enable==UART_TX__INT_ON)
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	11 f4       	brne	.+4      	; 0x282 <MUART_boolInit+0x106>
			SET_BIT(UCSRB,TXCIE);
 27e:	56 9a       	sbi	0x0a, 6	; 10
 280:	01 c0       	rjmp	.+2      	; 0x284 <MUART_boolInit+0x108>
		else
			CLR_BIT(UCSRB,TXCIE);
 282:	56 98       	cbi	0x0a, 6	; 10
   /*********RX interrupt enable********/
		if(obj->rx_interrupt_enable==UART_RX__INT_ON)
 284:	82 81       	ldd	r24, Z+2	; 0x02
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	11 f4       	brne	.+4      	; 0x28e <MUART_boolInit+0x112>
			SET_BIT(UCSRB,RXCIE);
 28a:	57 9a       	sbi	0x0a, 7	; 10
 28c:	01 c0       	rjmp	.+2      	; 0x290 <MUART_boolInit+0x114>
		else
			CLR_BIT(UCSRB,RXCIE);
 28e:	57 98       	cbi	0x0a, 7	; 10
	/**********UDRIE interrupt enable********/
		if(obj->UDRIE_interrupt_enable==UART_UDRIE__INT_ON)
 290:	84 81       	ldd	r24, Z+4	; 0x04
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	11 f4       	brne	.+4      	; 0x29a <MUART_boolInit+0x11e>
			SET_BIT(UCSRB,UDRIE);
 296:	55 9a       	sbi	0x0a, 5	; 10
 298:	01 c0       	rjmp	.+2      	; 0x29c <MUART_boolInit+0x120>
		else
			CLR_BIT(UCSRB,UDRIE);
 29a:	55 98       	cbi	0x0a, 5	; 10
	/************Baud rate setting***********/
		if(obj->baud_rate==BAUD_RATE_9600)
 29c:	85 81       	ldd	r24, Z+5	; 0x05
 29e:	96 81       	ldd	r25, Z+6	; 0x06
 2a0:	80 38       	cpi	r24, 0x80	; 128
 2a2:	25 e2       	ldi	r18, 0x25	; 37
 2a4:	92 07       	cpc	r25, r18
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <MUART_boolInit+0x134>
		{
			UBRL =0x33;
 2a8:	83 e3       	ldi	r24, 0x33	; 51
 2aa:	89 b9       	out	0x09, r24	; 9
			UBRH =0x00;
 2ac:	10 bc       	out	0x20, r1	; 32
 2ae:	0c c0       	rjmp	.+24     	; 0x2c8 <MUART_boolInit+0x14c>
		}
		else if(obj->baud_rate==BAUD_RATE_2400)
 2b0:	80 36       	cpi	r24, 0x60	; 96
 2b2:	29 e0       	ldi	r18, 0x09	; 9
 2b4:	92 07       	cpc	r25, r18
 2b6:	19 f4       	brne	.+6      	; 0x2be <MUART_boolInit+0x142>
		{
			UBRL =0x00;
 2b8:	19 b8       	out	0x09, r1	; 9
			UBRH =0x00;
 2ba:	10 bc       	out	0x20, r1	; 32
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <MUART_boolInit+0x14c>
		}
		else if(obj->baud_rate==BAUD_RATE_4800)
 2be:	80 3c       	cpi	r24, 0xC0	; 192
 2c0:	92 41       	sbci	r25, 0x12	; 18
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <MUART_boolInit+0x14c>
		{
			UBRL =0x00;
 2c4:	19 b8       	out	0x09, r1	; 9
			UBRH =0x00;
 2c6:	10 bc       	out	0x20, r1	; 32
		}
		
		/***turn on the galoble interrupt***/
		SET_BIT(SREG,7);
 2c8:	8f b7       	in	r24, 0x3f	; 63
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	8f bf       	out	0x3f, r24	; 63
}


bool_t MUART_boolInit(gstr_uart_t *obj)
{
	bool_t ret_val = E_TRUE;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
		/***turn on the galoble interrupt***/
		SET_BIT(SREG,7);
	}
	else
	{
		 ret_val=E_FALSE;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return ret_val;	
}
 2d4:	08 95       	ret

000002d6 <MUART_voidTransmitChar>:

void MUART_voidTransmitChar(u8 copy_u8Data)
{
	UDR = copy_u8Data;
 2d6:	8c b9       	out	0x0c, r24	; 12
	while(!GET_BIT(UCSRA,UDRE));
 2d8:	5d 9b       	sbis	0x0b, 5	; 11
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <MUART_voidTransmitChar+0x2>
}
 2dc:	08 95       	ret

000002de <MUART_voidTxCallbackFunction>:
	return UDR;
}

void MUART_voidTxCallbackFunction(void(*copy_cbPtr)(void))
{
	uart_TxCallBack = copy_cbPtr;	
 2de:	90 93 6f 00 	sts	0x006F, r25
 2e2:	80 93 6e 00 	sts	0x006E, r24
 2e6:	08 95       	ret

000002e8 <fun>:
	.stop_bit_num				=USART_ONE_STOP_BIT,
};

void fun()
{
	DDRA=DDRB=0xff;
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	87 bb       	out	0x17, r24	; 23
 2ec:	8a bb       	out	0x1a, r24	; 26
	PORTA =PORTB =0xff;
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	8b bb       	out	0x1b, r24	; 27
 2f2:	08 95       	ret

000002f4 <main>:
int main(void)
{
	u8 str[] ="Mahmoud Aboelsaoud "; 	
	u8 x;
	
	MUART_voidTxCallbackFunction(fun);
 2f4:	84 e7       	ldi	r24, 0x74	; 116
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 6f 01 	call	0x2de	; 0x2de <MUART_voidTxCallbackFunction>
	MUART_boolInit(&obj);
 2fc:	80 e6       	ldi	r24, 0x60	; 96
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 be 00 	call	0x17c	; 0x17c <MUART_boolInit>
	/*for(u8 i=0;i<10;i++)
	{
	  MUART_voidTransmitChar(pattern[i]);
	  _delay_ms(1000);
	}*/
	MUART_voidTransmitChar(10);
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MUART_voidTransmitChar>
 30a:	ff cf       	rjmp	.-2      	; 0x30a <main+0x16>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
