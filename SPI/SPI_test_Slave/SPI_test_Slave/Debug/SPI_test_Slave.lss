
SPI_test_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000913  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a2  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000323  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000873  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000274b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

bool_t GPIO_PortDirection(enum_port_t port, uint_8 pins, uint_8 port_dir)
{
	bool_t ret_val = E_FALSE;
	
   if(((port==PORTD)||(port ==PORTB)||(port ==PORTC)||(port ==PORTA)) && ((port_dir==INPUT)||((port_dir==OUTPUT))))
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
	{
		if (port_dir==INPUT)
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
		{
			if(port==PORTA)
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
			{
				DDRA &=~(1<<pins);
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_12>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
			}
			else if(port==PORTB)
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
			{
				DDRB &=~(1<<pins);
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
			}
			else if(port==PORTC)
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
			{
				DDRC &=~(1<<pins);
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 90 00 	call	0x120	; 0x120 <main>
			}
			else 
			{
				DDRD &=~(1<<pins);
  7a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_12>:
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
  94:	9f b1       	in	r25, 0x0f	; 15
			}
		}
		else if(port_dir==OUTPUT)
  96:	9b bb       	out	0x1b, r25	; 27
  98:	81 bb       	out	0x11, r24	; 17
		{
			if(port==PORTB)
  9a:	8f b1       	in	r24, 0x0f	; 15
  9c:	82 bb       	out	0x12, r24	; 18
			{
				DDRB|=(1<<pins);
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <MSPI_boolInit>:
  ac:	fc 01       	movw	r30, r24
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	a9 f1       	breq	.+106    	; 0x11c <MSPI_boolInit+0x70>
  b2:	bc 98       	cbi	0x17, 4	; 23
  b4:	bd 98       	cbi	0x17, 5	; 23
			}
		    else if(port==PORTA)
  b6:	be 9a       	sbi	0x17, 6	; 23
  b8:	bf 98       	cbi	0x17, 7	; 23
			{
				DDRA|=(1<<pins);
  ba:	86 81       	ldd	r24, Z+6	; 0x06
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	11 f4       	brne	.+4      	; 0xc4 <MSPI_boolInit+0x18>
  c0:	6f 9a       	sbi	0x0d, 7	; 13
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <MSPI_boolInit+0x1a>
  c4:	6f 98       	cbi	0x0d, 7	; 13
  c6:	87 81       	ldd	r24, Z+7	; 0x07
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	11 f4       	brne	.+4      	; 0xd0 <MSPI_boolInit+0x24>
  cc:	6d 9a       	sbi	0x0d, 5	; 13
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <MSPI_boolInit+0x26>
  d0:	6d 98       	cbi	0x0d, 5	; 13
  d2:	80 81       	ld	r24, Z
			}
		    else if(port==PORTC)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	11 f4       	brne	.+4      	; 0xdc <MSPI_boolInit+0x30>
			{
				DDRC|=(1<<pins);
  d8:	6c 9a       	sbi	0x0d, 4	; 13
  da:	01 c0       	rjmp	.+2      	; 0xde <MSPI_boolInit+0x32>
  dc:	6c 98       	cbi	0x0d, 4	; 13
  de:	84 81       	ldd	r24, Z+4	; 0x04
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	11 f4       	brne	.+4      	; 0xe8 <MSPI_boolInit+0x3c>
  e4:	6b 9a       	sbi	0x0d, 3	; 13
  e6:	01 c0       	rjmp	.+2      	; 0xea <MSPI_boolInit+0x3e>
  e8:	6b 98       	cbi	0x0d, 3	; 13
  ea:	85 81       	ldd	r24, Z+5	; 0x05
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	11 f4       	brne	.+4      	; 0xf4 <MSPI_boolInit+0x48>
			}
			else			{
				DDRD|=(1<<pins);
  f0:	6a 9a       	sbi	0x0d, 2	; 13
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <MSPI_boolInit+0x4a>
  f4:	6a 98       	cbi	0x0d, 2	; 13
  f6:	9d b1       	in	r25, 0x0d	; 13
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	89 2b       	or	r24, r25
  fc:	8d b9       	out	0x0d, r24	; 13
  fe:	83 81       	ldd	r24, Z+3	; 0x03
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	11 f4       	brne	.+4      	; 0x108 <MSPI_boolInit+0x5c>
 104:	70 9a       	sbi	0x0e, 0	; 14
 106:	01 c0       	rjmp	.+2      	; 0x10a <MSPI_boolInit+0x5e>
	else
	{
		ret_val=E_FALSE;
	}
	return ret_val;
}
 108:	70 98       	cbi	0x0e, 0	; 14
 10a:	82 81       	ldd	r24, Z+2	; 0x02
		if((str_ptrSpiCOnfig-> SpiDoubleSpeed) == SPI_DOUBLE_SPEED_MODE_ON)  SET_BIT(SPSR, SPI2X);
		else CLR_BIT(SPSR, SPI2X);
		
		
		/*Enable the SPI*/
		if((str_ptrSpiCOnfig-> SpiEnable) == SPI_ENABLE_ON)   SET_BIT(SPCR, SPE);
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	11 f4       	brne	.+4      	; 0x114 <MSPI_boolInit+0x68>
 110:	6e 9a       	sbi	0x0d, 6	; 13
 112:	01 c0       	rjmp	.+2      	; 0x116 <MSPI_boolInit+0x6a>
		else CLR_BIT(SPCR, SPE);
 114:	6e 98       	cbi	0x0d, 6	; 13
		
		
		SET_BIT(SREG,7);
 116:	8f b7       	in	r24, 0x3f	; 63
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8f bf       	out	0x3f, r24	; 63
	else
	{
		
	}
	return ret_val;
}
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <main>:
	.SpiPrescaler = SPI_FOSC4,
};

int main(void)
{
	DDRA=0xff;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
	MSPI_boolInit(&obg1);
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 56 00 	call	0xac	; 0xac <MSPI_boolInit>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0xc>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
