
Timer_driver_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003f6  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  00000494  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000076b  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028a  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000350  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000228  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000399  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000921  00000000  00000000  00001fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000028ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_4>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_10>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <fun0>:
#include <avr/io.h>
#include "TIMER_interface.h"

void fun0()
{
	DDRB = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;	
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret

0000009a <fun2>:
}


void fun2()
{
	DDRC = 0xff;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;	
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <main>:
	.ptr_to_timer_handler =fun2,
};

int main(void)
{
	hal_init_timer(&obj0);
  a2:	85 e6       	ldi	r24, 0x65	; 101
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 08 01 	call	0x210	; 0x210 <hal_init_timer>
	hal_init_timer(&obj2);
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 08 01 	call	0x210	; 0x210 <hal_init_timer>
	
	hal_update_init_timer_value(&obj0,100);
  b2:	64 e6       	ldi	r22, 0x64	; 100
  b4:	85 e6       	ldi	r24, 0x65	; 101
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 c1 01 	call	0x382	; 0x382 <hal_update_init_timer_value>
	hal_update_cmp_timer(&obj2,50);
  bc:	62 e3       	ldi	r22, 0x32	; 50
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <hal_update_cmp_timer>
	
	hal_start_timer(&obj0);
  c6:	85 e6       	ldi	r24, 0x65	; 101
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 9e 01 	call	0x33c	; 0x33c <hal_start_timer>
	hal_start_timer(&obj2);
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 9e 01 	call	0x33c	; 0x33c <hal_start_timer>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x34>

000000d8 <__vector_11>:
static void (*cb_fun_t2_ovf_normal)(void);
static void (*cb_comp_t2_ctc)(void);


ISR(TIMER0_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
   (*cb_fun_t0_ovf_normal)();
  fa:	e0 91 6a 00 	lds	r30, 0x006A
  fe:	f0 91 6b 00 	lds	r31, 0x006B
 102:	09 95       	icall
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	(*cb_comp_t0_ctc)();
 148:	e0 91 6c 00 	lds	r30, 0x006C
 14c:	f0 91 6d 00 	lds	r31, 0x006D
 150:	09 95       	icall
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_5>:


ISR(TIMER2_OVF_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
   (*cb_fun_t2_ovf_normal)();
 196:	e0 91 6e 00 	lds	r30, 0x006E
 19a:	f0 91 6f 00 	lds	r31, 0x006F
 19e:	09 95       	icall
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	(*cb_comp_t2_ctc)();
 1e4:	e0 91 70 00 	lds	r30, 0x0070
 1e8:	f0 91 71 00 	lds	r31, 0x0071
 1ec:	09 95       	icall
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <hal_init_timer>:
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
	if(obj != NULL)
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	09 f4       	brne	.+2      	; 0x216 <hal_init_timer+0x6>
 214:	80 c0       	rjmp	.+256    	; 0x316 <hal_init_timer+0x106>
	{
		if( obj->freq && obj->ins_timer && obj->timer_fun && obj->ptr_to_timer_handler!=NULL )
 216:	fc 01       	movw	r30, r24
 218:	21 81       	ldd	r18, Z+1	; 0x01
 21a:	22 23       	and	r18, r18
 21c:	09 f4       	brne	.+2      	; 0x220 <hal_init_timer+0x10>
 21e:	7d c0       	rjmp	.+250    	; 0x31a <hal_init_timer+0x10a>
 220:	20 81       	ld	r18, Z
 222:	22 23       	and	r18, r18
 224:	09 f4       	brne	.+2      	; 0x228 <hal_init_timer+0x18>
 226:	7b c0       	rjmp	.+246    	; 0x31e <hal_init_timer+0x10e>
 228:	32 81       	ldd	r19, Z+2	; 0x02
 22a:	33 23       	and	r19, r19
 22c:	09 f4       	brne	.+2      	; 0x230 <hal_init_timer+0x20>
 22e:	79 c0       	rjmp	.+242    	; 0x322 <hal_init_timer+0x112>
 230:	83 81       	ldd	r24, Z+3	; 0x03
 232:	94 81       	ldd	r25, Z+4	; 0x04
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	09 f4       	brne	.+2      	; 0x23a <hal_init_timer+0x2a>
 238:	76 c0       	rjmp	.+236    	; 0x326 <hal_init_timer+0x116>
		{
			 if( obj->ins_timer==TIMER_0)
 23a:	23 35       	cpi	r18, 0x53	; 83
 23c:	99 f5       	brne	.+102    	; 0x2a4 <hal_init_timer+0x94>
			 {
				 if(obj->timer_fun==NORMAL_MODE)
 23e:	31 30       	cpi	r19, 0x01	; 1
 240:	71 f4       	brne	.+28     	; 0x25e <hal_init_timer+0x4e>
				 {
					 cb_fun_t0_ovf_normal = obj->ptr_to_timer_handler;
 242:	90 93 6b 00 	sts	0x006B, r25
 246:	80 93 6a 00 	sts	0x006A, r24
					 TCCR0 &=~(1<<3) &~(1<<6); /*mode select*/
 24a:	83 b7       	in	r24, 0x33	; 51
 24c:	87 7b       	andi	r24, 0xB7	; 183
 24e:	83 bf       	out	0x33, r24	; 51
					 TIMSK |= (1<<0);          /*Interrupt Enable*/
 250:	89 b7       	in	r24, 0x39	; 57
 252:	81 60       	ori	r24, 0x01	; 1
 254:	89 bf       	out	0x39, r24	; 57
					 timer_init_flag = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 72 00 	sts	0x0072, r24
 25c:	6b c0       	rjmp	.+214    	; 0x334 <hal_init_timer+0x124>
				 }
				 else if(obj->timer_fun==PWM_PHASE_CORRECT)
 25e:	33 30       	cpi	r19, 0x03	; 3
 260:	39 f4       	brne	.+14     	; 0x270 <hal_init_timer+0x60>
				 {
					 TCCR0 |=(1<<3) &~(1<<6); /*mode select*/
 262:	83 b7       	in	r24, 0x33	; 51
 264:	88 60       	ori	r24, 0x08	; 8
 266:	83 bf       	out	0x33, r24	; 51
					 timer_init_flag = 0;
 268:	10 92 72 00 	sts	0x0072, r1
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	62 c0       	rjmp	.+196    	; 0x334 <hal_init_timer+0x124>
				 else if(obj->timer_fun==PWM_PHASE_CORRECT)
				 {
					 TCCR0 |=(1<<3) &~(1<<6); /*mode select*/
					 timer_init_flag = 0;
				 }
				 else if(obj->timer_fun==CTC_MODE)
 270:	32 30       	cpi	r19, 0x02	; 2
 272:	71 f4       	brne	.+28     	; 0x290 <hal_init_timer+0x80>
				 {
					 cb_comp_t0_ctc = obj->ptr_to_timer_handler;
 274:	90 93 6d 00 	sts	0x006D, r25
 278:	80 93 6c 00 	sts	0x006C, r24
					 TCCR0 |=(1<<6) &~(1<<3); /*mode select*/
 27c:	83 b7       	in	r24, 0x33	; 51
 27e:	80 64       	ori	r24, 0x40	; 64
 280:	83 bf       	out	0x33, r24	; 51
					 TIMSK |= (1<<1);         /*Interrupt Enable*/
 282:	89 b7       	in	r24, 0x39	; 57
 284:	82 60       	ori	r24, 0x02	; 2
 286:	89 bf       	out	0x39, r24	; 57
					 timer_init_flag = 0;
 288:	10 92 72 00 	sts	0x0072, r1
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	52 c0       	rjmp	.+164    	; 0x334 <hal_init_timer+0x124>
					 cb_comp_t0_ctc = obj->ptr_to_timer_handler;
					 TCCR0 |=(1<<6) &~(1<<3); /*mode select*/
					 TIMSK |= (1<<1);         /*Interrupt Enable*/
					 timer_init_flag = 0;
				 }
				 else if(obj->timer_fun==FAST_PWM)
 290:	34 30       	cpi	r19, 0x04	; 4
 292:	09 f0       	breq	.+2      	; 0x296 <hal_init_timer+0x86>
 294:	4a c0       	rjmp	.+148    	; 0x32a <hal_init_timer+0x11a>
				 {
					  TCCR0 |=(1<<3) |(1<<6); /*mode select*/
 296:	83 b7       	in	r24, 0x33	; 51
 298:	88 64       	ori	r24, 0x48	; 72
 29a:	83 bf       	out	0x33, r24	; 51
					  timer_init_flag = 0;
 29c:	10 92 72 00 	sts	0x0072, r1
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	48 c0       	rjmp	.+144    	; 0x334 <hal_init_timer+0x124>
				 {
					 ret_val = MODE_ERROR;
				 } 
			 }
			 
			  else if(obj->ins_timer==TIMER_2)
 2a4:	25 34       	cpi	r18, 0x45	; 69
 2a6:	09 f0       	breq	.+2      	; 0x2aa <hal_init_timer+0x9a>
 2a8:	42 c0       	rjmp	.+132    	; 0x32e <hal_init_timer+0x11e>
			  {
				 if(obj->timer_fun==NORMAL_MODE)
 2aa:	31 30       	cpi	r19, 0x01	; 1
 2ac:	79 f4       	brne	.+30     	; 0x2cc <hal_init_timer+0xbc>
				 {
					 cb_fun_t2_ovf_normal = obj->ptr_to_timer_handler;
 2ae:	90 93 6f 00 	sts	0x006F, r25
 2b2:	80 93 6e 00 	sts	0x006E, r24
					 TCCR2 &=~(1<<3) &~(1<<6); /*mode select*/
 2b6:	85 b5       	in	r24, 0x25	; 37
 2b8:	87 7b       	andi	r24, 0xB7	; 183
 2ba:	85 bd       	out	0x25, r24	; 37
					 TIMSK |= (1<<6);          /*Interrupt Enable*/
 2bc:	89 b7       	in	r24, 0x39	; 57
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	89 bf       	out	0x39, r24	; 57
					 timer_init_flag = 2;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 72 00 	sts	0x0072, r24
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	34 c0       	rjmp	.+104    	; 0x334 <hal_init_timer+0x124>
					 cb_fun_t2_ovf_normal = obj->ptr_to_timer_handler;
					 TCCR2 &=~(1<<3) &~(1<<6); /*mode select*/
					 TIMSK |= (1<<6);          /*Interrupt Enable*/
					 timer_init_flag = 2;
				 }
				 else if(obj->timer_fun==PWM_PHASE_CORRECT)
 2cc:	33 30       	cpi	r19, 0x03	; 3
 2ce:	41 f4       	brne	.+16     	; 0x2e0 <hal_init_timer+0xd0>
				 {
					 TCCR2 |=(1<<3) &~(1<<6); /*mode select*/
 2d0:	85 b5       	in	r24, 0x25	; 37
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	85 bd       	out	0x25, r24	; 37
					 timer_init_flag = 2;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 72 00 	sts	0x0072, r24
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	2a c0       	rjmp	.+84     	; 0x334 <hal_init_timer+0x124>
				 else if(obj->timer_fun==PWM_PHASE_CORRECT)
				 {
					 TCCR2 |=(1<<3) &~(1<<6); /*mode select*/
					 timer_init_flag = 2;
				 }
				 else if(obj->timer_fun==CTC_MODE)
 2e0:	32 30       	cpi	r19, 0x02	; 2
 2e2:	79 f4       	brne	.+30     	; 0x302 <hal_init_timer+0xf2>
				 {
					 cb_comp_t2_ctc = obj->ptr_to_timer_handler;
 2e4:	90 93 71 00 	sts	0x0071, r25
 2e8:	80 93 70 00 	sts	0x0070, r24
					 TCCR2 |=(1<<6) &~(1<<3); /*mode select*/
 2ec:	85 b5       	in	r24, 0x25	; 37
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	85 bd       	out	0x25, r24	; 37
					 TIMSK |= (1<<7);         /*Interrupt Enable*/
 2f2:	89 b7       	in	r24, 0x39	; 57
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	89 bf       	out	0x39, r24	; 57
					 timer_init_flag = 2;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 72 00 	sts	0x0072, r24
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	19 c0       	rjmp	.+50     	; 0x334 <hal_init_timer+0x124>
					 cb_comp_t2_ctc = obj->ptr_to_timer_handler;
					 TCCR2 |=(1<<6) &~(1<<3); /*mode select*/
					 TIMSK |= (1<<7);         /*Interrupt Enable*/
					 timer_init_flag = 2;
				 }
				 else if(obj->timer_fun==FAST_PWM)
 302:	34 30       	cpi	r19, 0x04	; 4
 304:	b1 f4       	brne	.+44     	; 0x332 <hal_init_timer+0x122>
				 {
					 TCCR2 |=(1<<3) |(1<<6); /*mode select*/
 306:	85 b5       	in	r24, 0x25	; 37
 308:	88 64       	ori	r24, 0x48	; 72
 30a:	85 bd       	out	0x25, r24	; 37
					 timer_init_flag = 2;
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 72 00 	sts	0x0072, r24
	*(volatile unsigned char*)0x5f |=(1<<7); // I
}

su8 hal_init_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0f c0       	rjmp	.+30     	; 0x334 <hal_init_timer+0x124>
			ret_val = INVALID_ARG;
		}
	}
	else
	{
		ret_val = INVALID_ARG;
 316:	8d ec       	ldi	r24, 0xCD	; 205
 318:	0d c0       	rjmp	.+26     	; 0x334 <hal_init_timer+0x124>
			  }

		}
		else
		{
			ret_val = INVALID_ARG;
 31a:	8d ec       	ldi	r24, 0xCD	; 205
 31c:	0b c0       	rjmp	.+22     	; 0x334 <hal_init_timer+0x124>
 31e:	8d ec       	ldi	r24, 0xCD	; 205
 320:	09 c0       	rjmp	.+18     	; 0x334 <hal_init_timer+0x124>
 322:	8d ec       	ldi	r24, 0xCD	; 205
 324:	07 c0       	rjmp	.+14     	; 0x334 <hal_init_timer+0x124>
 326:	8d ec       	ldi	r24, 0xCD	; 205
 328:	05 c0       	rjmp	.+10     	; 0x334 <hal_init_timer+0x124>
					  TCCR0 |=(1<<3) |(1<<6); /*mode select*/
					  timer_init_flag = 0;
				 }
				 else
				 {
					 ret_val = MODE_ERROR;
 32a:	8b ec       	ldi	r24, 0xCB	; 203
 32c:	03 c0       	rjmp	.+6      	; 0x334 <hal_init_timer+0x124>
					 ret_val = MODE_ERROR;
				 }
			  }
			  else
			  {
				  ret_val = INVALID_ARG;
 32e:	8d ec       	ldi	r24, 0xCD	; 205
 330:	01 c0       	rjmp	.+2      	; 0x334 <hal_init_timer+0x124>
					 TCCR2 |=(1<<3) |(1<<6); /*mode select*/
					 timer_init_flag = 2;
				 }
				 else
				 {
					 ret_val = MODE_ERROR;
 332:	8b ec       	ldi	r24, 0xCB	; 203
}


static void  interupt_config()
{
	*(volatile unsigned char*)0x5f |=(1<<7); // I
 334:	9f b7       	in	r25, 0x3f	; 63
 336:	90 68       	ori	r25, 0x80	; 128
 338:	9f bf       	out	0x3f, r25	; 63
	{
		ret_val = INVALID_ARG;
	}
	interupt_config();
	return ret_val;
}
 33a:	08 95       	ret

0000033c <hal_start_timer>:


su8 hal_start_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
	if(obj != NULL && timer_init_flag !=0)
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	c9 f0       	breq	.+50     	; 0x372 <hal_start_timer+0x36>
 340:	20 91 72 00 	lds	r18, 0x0072
 344:	22 23       	and	r18, r18
 346:	b9 f0       	breq	.+46     	; 0x376 <hal_start_timer+0x3a>
	{
	  if (obj->ins_timer == TIMER_0)
 348:	fc 01       	movw	r30, r24
 34a:	20 81       	ld	r18, Z
 34c:	23 35       	cpi	r18, 0x53	; 83
 34e:	31 f4       	brne	.+12     	; 0x35c <hal_start_timer+0x20>
	  {
		  TCCR0 |= obj->freq;
 350:	23 b7       	in	r18, 0x33	; 51
 352:	81 81       	ldd	r24, Z+1	; 0x01
 354:	82 2b       	or	r24, r18
 356:	83 bf       	out	0x33, r24	; 51
}


su8 hal_start_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
	{
	  if (obj->ins_timer == TIMER_0)
	  {
		  TCCR0 |= obj->freq;
	  }
	  else if(obj->ins_timer == TIMER_1)
 35c:	2f 34       	cpi	r18, 0x4F	; 79
 35e:	69 f0       	breq	.+26     	; 0x37a <hal_start_timer+0x3e>
	  {
		  /*Not handled yet*/
	  }
	  else if(obj->ins_timer == TIMER_2)
 360:	25 34       	cpi	r18, 0x45	; 69
 362:	69 f4       	brne	.+26     	; 0x37e <hal_start_timer+0x42>
	  {
		  TCCR2 |= obj->freq;
 364:	25 b5       	in	r18, 0x25	; 37
 366:	fc 01       	movw	r30, r24
 368:	81 81       	ldd	r24, Z+1	; 0x01
 36a:	82 2b       	or	r24, r18
 36c:	85 bd       	out	0x25, r24	; 37
}


su8 hal_start_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
		ret_val = INVALID_TIMER;
	  } 
	}
	else
	{
		ret_val = E_NOK;
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
}


su8 hal_start_timer(gcfg_hal_timer_t * obj)
{
	su8 ret_val = E_OK;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
	  {
		  TCCR2 |= obj->freq;
	  }
	  else
	  {
		ret_val = INVALID_TIMER;
 37e:	8c ec       	ldi	r24, 0xCC	; 204
	{
		ret_val = E_NOK;
	}
	
	return ret_val;
}
 380:	08 95       	ret

00000382 <hal_update_init_timer_value>:


su8 hal_update_init_timer_value(gcfg_hal_timer_t * obj , u8 value)
{
	su8 ret_val = E_OK;
	if(obj != NULL &&timer_init_flag !=0)
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	91 f0       	breq	.+36     	; 0x3aa <hal_update_init_timer_value+0x28>
 386:	20 91 72 00 	lds	r18, 0x0072
 38a:	22 23       	and	r18, r18
 38c:	81 f0       	breq	.+32     	; 0x3ae <hal_update_init_timer_value+0x2c>
	{
		if (obj->ins_timer == TIMER_0)
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z
 392:	83 35       	cpi	r24, 0x53	; 83
 394:	19 f4       	brne	.+6      	; 0x39c <hal_update_init_timer_value+0x1a>
		{
			 TCNT0 = value;
 396:	62 bf       	out	0x32, r22	; 50
}


su8 hal_update_init_timer_value(gcfg_hal_timer_t * obj , u8 value)
{
	su8 ret_val = E_OK;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
	{
		if (obj->ins_timer == TIMER_0)
		{
			 TCNT0 = value;
		}
		else if(obj->ins_timer == TIMER_1)
 39c:	8f 34       	cpi	r24, 0x4F	; 79
 39e:	49 f0       	breq	.+18     	; 0x3b2 <hal_update_init_timer_value+0x30>
		{
			/*Not handled yet*/
		}
		else if(obj->ins_timer == TIMER_2)
 3a0:	85 34       	cpi	r24, 0x45	; 69
 3a2:	49 f4       	brne	.+18     	; 0x3b6 <hal_update_init_timer_value+0x34>
		{
			TCNT2 = value;
 3a4:	64 bd       	out	0x24, r22	; 36
}


su8 hal_update_init_timer_value(gcfg_hal_timer_t * obj , u8 value)
{
	su8 ret_val = E_OK;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret
			ret_val = INVALID_TIMER;
		}
	}
	else
	{
		ret_val = E_NOK;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret
}


su8 hal_update_init_timer_value(gcfg_hal_timer_t * obj , u8 value)
{
	su8 ret_val = E_OK;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
		{
			TCNT2 = value;
		}
		else
		{
			ret_val = INVALID_TIMER;
 3b6:	8c ec       	ldi	r24, 0xCC	; 204
	{
		ret_val = E_NOK;
	}

	return ret_val;
}
 3b8:	08 95       	ret

000003ba <hal_update_cmp_timer>:

su8 hal_update_cmp_timer(gcfg_hal_timer_t * obj , u8 value)
{
	 su8 ret_val = E_OK;
	 if(obj != NULL &&timer_init_flag !=0)
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	91 f0       	breq	.+36     	; 0x3e2 <hal_update_cmp_timer+0x28>
 3be:	20 91 72 00 	lds	r18, 0x0072
 3c2:	22 23       	and	r18, r18
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <hal_update_cmp_timer+0x2c>
		{
			if (obj->ins_timer == TIMER_0)
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	83 35       	cpi	r24, 0x53	; 83
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <hal_update_cmp_timer+0x1a>
			{
				OCR0 = value;
 3ce:	6c bf       	out	0x3c, r22	; 60
	return ret_val;
}

su8 hal_update_cmp_timer(gcfg_hal_timer_t * obj , u8 value)
{
	 su8 ret_val = E_OK;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret
		{
			if (obj->ins_timer == TIMER_0)
			{
				OCR0 = value;
			}
			else if(obj->ins_timer == TIMER_1)
 3d4:	8f 34       	cpi	r24, 0x4F	; 79
 3d6:	49 f0       	breq	.+18     	; 0x3ea <hal_update_cmp_timer+0x30>
			{
				/*Not handled yet*/
			}
			else if(obj->ins_timer == TIMER_2)
 3d8:	85 34       	cpi	r24, 0x45	; 69
 3da:	49 f4       	brne	.+18     	; 0x3ee <hal_update_cmp_timer+0x34>
			{
				OCR2 = value;
 3dc:	63 bd       	out	0x23, r22	; 35
	return ret_val;
}

su8 hal_update_cmp_timer(gcfg_hal_timer_t * obj , u8 value)
{
	 su8 ret_val = E_OK;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret
				ret_val = INVALID_TIMER;
			}
		}
		else
		{
			ret_val = E_NOK;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	08 95       	ret
	return ret_val;
}

su8 hal_update_cmp_timer(gcfg_hal_timer_t * obj , u8 value)
{
	 su8 ret_val = E_OK;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret
			{
				OCR2 = value;
			}
			else
			{
				ret_val = INVALID_TIMER;
 3ee:	8c ec       	ldi	r24, 0xCC	; 204
		{
			ret_val = E_NOK;
		}

		return ret_val;
}
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
